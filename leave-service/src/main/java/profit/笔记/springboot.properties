1。什么是 Spring Boot？
    1。SpringBoot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案
    2。主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，开发者能快速上手。
2。为什么要用 Spring Boot？
    优点：
        1。独立运行
            1。Spring Boot而且内嵌了各种servlet容器，Tomcat、Jetty等
            2。现在不再需要打成war包部署到容器中，Spring Boot只要打成一个可执行的jar包就能独立运行，所有的依赖包都在一个jar包内。
        2。简化配置
            spring-boot-starter-web启动器自动依赖其他组件，简少了maven的配置。
        3。自动配置
            1。Spring Boot能根据当前类路径下的类、jar包来自动配置bean
            2。如添加一个spring-boot-starter-web启动器就能拥有web的功能，无需其他配置。
        4。无代码生成和XML配置
            1。Spring Boot配置过程中无代码生成，也无需XML配置文件就能完成所有配置工作
            2。这一切都是借助于条件注解完成的，这也是Spring4.x的核心功能之一。
        5。应用监控
            Spring Boot提供一系列端点可以监控服务及应用，做健康检测。
    Spring Boot 的核心配置文件有哪几个？它们的区别是什么？
    Spring Boot 中有以下两种配置文件：
        1。bootstrap (.yml 或者 .properties)
        2。application (.yml 或者 .properties)
    bootstrap/ application 的区别：
        bootstrap：
            特点：
                1。boostrap 由父 ApplicationContext 加载，比 applicaton 优先加载
                2。boostrap 里面的属性不能被覆盖
            应用场景：
                1。使用 Spring Cloud Config 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；
                2。一些固定的不能被覆盖的属性
                3。一些加密/解密的场景。
        application：
            配置文件这个容易理解，主要用于 Spring Boot 项目的自动化配置。
3。Spring Boot 的配置文件有哪几种格式？它们有什么区别？
    .properties 和 .yml，它们的区别主要是书写格式不同。
        1。.properties
            app.user.name = javastack
        2。.yml
            app:
                user:
                    name: javastack
        .yml 格式不支持 @PropertySource 注解导入配置。
4。Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？
    启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：
        1。@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能
        2。@EnableAutoConfiguration
            1。打开自动配置的功能，也可以关闭某个自动配置的选项
            2。如关闭数据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。
        3。@ComponentScan：Spring组件扫描。
5。开启 Spring Boot 特性有哪几种方式？
    有以下两种方式：
        1。继承spring-boot-starter-parent项目
            <parent>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>1.5.6.RELEASE</version>
            </parent>
        2。导入spring-boot-dependencies项目依赖
            <dependencyManagement>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-dependencies</artifactId>
                        <version>1.5.6.RELEASE</version>
                        <type>pom</type>
                        <scope>import</scope>
                    </dependency>
                <dependencies>
            </dependencyManagement>
    依赖注意点
        1。属性覆盖只对继承有效
            1。Spring Boot依赖包里面的组件的版本都是和当前Spring Boot绑定的
            2。如果要修改里面组件的版本，只需要添加如下属性覆盖即可，但这种方式只对继承有效，导入的方式无效。
            <properties>
                <slf4j.version>1.7.25<slf4j.version>
            </properties>
        2。如果导入的方式要实现版本的升级，达到上面的效果，这样也可以做到，把要升级的组件依赖放到Spring Boot之前。
        参考：
            https://blog.csdn.net/Kevin_Gu6/article/details/88547424
6。Spring Boot 需要独立的容器运行吗？
    可以不需要，内置了 Tomcat/Jetty 等容器。
7。运行 Spring Boot 有哪几种方式？
    1。打包用命令或者放到容器中运行
    2。用 Maven/Gradle 插件运行
    3。直接执行 main 方法运行
8。Spring Boot 自动配置原理是什么？
    1。Spring Boot的自动配置注解是@EnableAutoConfiguration
    2。从上面的@Import的类可以找到下面自动加载自动配置的映射。
        参考代码：
            org.springframework.core.io.support.SpringFactoriesLoader.loadFactoryNames(Class<?>, ClassLoader)
    3。这个方法会加载类路径及所有jar包下META-INF/spring.factories配置中映射的自动配置的类。
    参考代码：
        public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";
    4。查看Spring Boot自带的自动配置的包： spring-boot-autoconfigure-1.5.6.RELEASE.jar
        打开其中的META-INF/spring.factories文件会找到自动配置的映射。
9。Spring Boot 的目录结构是怎样的？
    1。Spring Boot 与传统项目最大的区别是，传统项目都是打成 WAR 包部署到服务器上面
    2。需要额外的 Servlet 容器， 而 Spring Boot 则可以直接打成 jar包
    3。并内置集成了 Servlet 容器，通过命令 java -jar xx.jar 则可以直接运行，不需要独立的 Servlet 容器。
    第一：
        打成可执行 jar 包后，我们来看下其中的 META-INF/MANIFEST.MF 文件：
    第二：
        1。其中有一个 Start-Class 便是这个 jar 包的入口类，这个入口类推荐是放在一个项目的顶层包中
        2。其他所有的类都放在其子包下面，目录结构如以下所示：
    第三：
        1。这个目录结构是主流及推荐的做法，而在主入口类上加上 @SpringBootApplication 注解来开启 Spring Boot 的各项能力
        2。如自动配置、组件扫描等。
10。你如何理解 Spring Boot 中的 Starters？
    1。Starters是什么：
        答案：
            1。Starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包
            2。你可以一站式集成Spring及其他技术，而不需要到处找示例代码和依赖包
    2。Starters命名：
        Spring Boot官方的启动器都是以spring-boot-starter-命名的，代表了一个特定的应用类型。
        第三方命名：
            像mybatis的mybatis-spring-boot-starter。
    3。分类：
        1。Spring Boot应用类启动器
        2。Spring Boot生产启动器
        3。Spring Boot技术类启动器
        4。其他第三方启动器
11。如何在 Spring Boot 启动的时候运行一些特定的代码？
    1。如果你想在Spring Boot启动的时候运行一些特定的代码，你可以实现接口ApplicationRunner或者CommandLineRunner，
    2。这两个接口实现方式一样，它们都只提供了一个run方法。
    启动顺序：
        1。如果启动的时候有多个ApplicationRunner和CommandLineRunner，想控制它们的启动顺序
        2。可以实现 org.springframework.core.Ordered接口或者使用 org.springframework.core.annotation.Order注解。
12。Spring Boot 有哪几种读取配置的方式？
    1。读取application文件：
        1。@Value注解读取方式：
        2。@ConfigurationProperties注解读取方式：
    2。读取指定文件：
        例子：
            资源目录下建立config/db-config.properties:
        方式：
            1。@PropertySource+@Value注解读取方式：
                注意：@PropertySource不支持yml文件读取。
            2。@PropertySource+@ConfigurationProperties注解读取方式：
    3。Environment读取方式：
        以上所有加载出来的配置都可以通过Environment注入获取到：
    总结：
        Spring Boot可以通过@PropertySource,@Value,@Environment,@ConfigurationProperties来绑定变量。

13。Spring Boot 支持哪些日志框架？推荐和默认的日志框架是哪个？
    1。Spring Boot支持Java Util Logging,Log4j2,Lockback作为日志框架
    2。如果你使用starters启动器，Spring Boot将使用Logback作为默认日志框架
    3。无论使用哪种日志框架，Spring Boot都支持配置将日志输出到控制台或者文件中。
    方式：
        1。属性配置日志：
        2。自定义日志文件：
            强烈推荐使用logback-spring.xml作为文件名，因为logback.xml加载太早。
14。SpringBoot 实现热部署有哪几种方式？
    概念：
        在Spring Boot实现代码热部署是一件很简单的事情，代码的修改可以自动部署并重新热启动项目。
    实现方式：
        1。引用devtools依赖：
        2。自定义配置热部署：
        3。Intellij Idea修改：
            如果是idea，需要改以下两个地方：
                1。勾上自动编译或者手动重新编译
                    File > Settings > Compiler-Build Project automatically
                2。注册
                    ctrl + shift + alt + / > Registry > 勾选Compiler autoMake allow when app running
15。你如何理解 Spring Boot 配置加载顺序？
    分析：
        1。使用 Spring Boot 会涉及到各种各样的配置，如开发、测试、线上就至少 3 套配置信息了
        2。Spring Boot 可以轻松的帮助我们使用相同的代码就能使开发、测试、线上环境使用不同的配置。
    在 Spring Boot 里面，可以使用以下几种方式来加载配置
        1。properties文件；
        2。YAML文件；
        3。系统环境变量；
        4。命令行参数；
16。Spring Boot 如何定义多套不同环境配置？
    Profile：
        1。Profile就是Spring Boot可以对不同环境或者指令来读取不同的配置文件。
    案例：
        假如有开发、测试、生产三个不同的环境，需要定义三个不同环境下的配置。
    方法一：
        基于properties文件类型实现：
        applcation.properties
        application-dev.properties
        application-test.properties
        application-prod.properties
    方法二：
        基于yml文件类型
        只需要一个applcation.yml文件就能搞定，推荐此方式。
    方法三：
        1。在JAVA配置代码中也可以加不同Profile下定义不同的配置文件
        2。@Profile注解只能组合使用@Configuration和@Component注解。
    指定Profile：
        1。main方法启动方式：
        2。插件启动方式：
        3。jar运行方式：
17。JavaBean是什么时候创建的？
1。直接启动，通过日志可以看到TestController 被创建了
2。设置断点进行调试
    断点一：启动位置
    断点二：run 方法内部
        分为以下步骤：
            1。加载环境变量
            2。创建上下文 ConfigurableApplicationContext 对象 
            3。准备上下文 prepareContext() 
            4。刷新上下文 refreshContext() 
            5。刷新之后的处理 afterRefresh() 
断点三：
    进入refreshContext 方法，找到最终调用的方法 refresh()