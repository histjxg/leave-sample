1。spring是什么？
    答案：
        1。spring是一款轻量级的Ioc和AOP框架。是为java应用程序提供基础服务性服务的一套框架
        目的是用于简化企业应用程序的开发，它使得开发者只需要关心业务需求。
    常见的配置方式：
        1。基于XML的配置
        2。基于注解的配置
        3。基于Java的配置。
    主要的几个核心模块：
        1。Spring Core：核心类库，提供IOC服务；
        2。Spring Context：提供框架式的Bean访问方式，以及企业级功能（JNDI、定时任务等）；
        3。Spring AOP：AOP服务；
        4。Spring DAO：对JDBC的抽象，简化了数据访问异常的处理；
        5。Spring ORM：对现有的ORM框架的支持；
        6。Spring Web：提供了基本的面向Web的综合特性，例如多方文件上传；
        7。Spring MVC：提供面向Web应用的Model-View-Controller实现。
2。Spring 的优点？
    1。spring属于低侵入式设计，代码的污染极低；
    2。spring的DI机制将对象之间的依赖关系交由框架处理，减低组件的耦合性；
    3。Spring提供了AOP技术，支持将一些通用任务，如安全、事务、日志、权限等进行集中式管理，从而提供更好的复用。
    4。spring对于主流的应用框架提供了集成支持。
3。Spring的AOP理解：
    OOP：
        1。面向对象，允许开发者定义纵向的关系，但并适用于定义横向的关系
        2。导致了大量代码的重复，而不利于各个模块的重用。
    AOP：
        1。一般称为面向切面，作为面向对象的一种补充，用于将那些与业务无关
        2。但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块
        3。这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性
        4。可用于权限认证、日志、事务处理。
    关键点：
        关键在于代理模式，AOP代理主要分为静态代理和动态代理。
        静态模式：代表为AspectJ
            原理：
                1。所谓静态代理，就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强
                2。他会在编译阶段将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。
            参考：https://blog.csdn.net/zpf336/article/details/82751925
            优点：
                业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。
            缺点：
                1。代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。
                2。如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。
        动态模式：以Spring AOP为代表。
            原理：
                1。所谓的动态代理就是说AOP框架不会去修改字节码，而是每次运行时在内存中临时为方法生成一个AOP对象
                2。这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。
            两种方式：
                1。JDK动态代理：
                    1。只提供接口的代理，不支持类的代理
                    2。核心InvocationHandler接口和Proxy类，InvocationHandler 通过invoke()方法反射来调用目标类中的代码
                    3。动态地将横切逻辑和业务编织在一起；
                    4。接着，Proxy利用 InvocationHandler动态创建一个符合某一接口的的实例,  生成目标类的代理对象。
                2。CGLIB动态代理：
                    1。没有实现 InvocationHandler 接口，那么Spring AOP会选择使用CGLIB来动态代理目标类
                    2。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象
                    3。并覆盖其中特定方法并添加增强代码，从而实现AOP
                    4。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。
4、Spring的IoC理解：
    第一
        1。IOC就是控制反转，是指创建对象的控制权的转移，以前创建对象的主动权和时机是由自己把控的
        2。而现在这种权力转移到Spring容器中，并由容器根据配置文件去创建实例和管理各个实例之间的依赖关系
        3。对象与对象之间松散耦合，也利于功能的复用
        4。DI依赖注入，和控制反转是同一个概念的不同角度的描述，即应用程序在运行时依赖IoC容器来动态注入对象需要的外部资源。
    第二：
        1。最直观的表达就是，IOC让对象的创建不用去new了，可以由spring自动生产
        2。使用java的反射机制，根据配置文件在运行时动态的去创建对象以及管理对象，并调用对象的方法的。
    第三：
        Spring的IOC有三种注入方式 ：构造器注入、setter方法注入、根据注解注入。
5。BeanFactory和ApplicationContext有什么区别？
    区别：
        1。BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器
        2。其中ApplicationContext是BeanFactory的子接口。
    第一
        BeanFactory：
            1。是Spring里面最底层的接口，包含了各种Bean的定义，读取bean配置文档
            2。管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系
            3。ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能：
                1。继承MessageSource，因此支持国际化。
                2。统一的资源文件访问方式。
                3。提供在监听器中注册bean的事件。
                4。同时加载多个配置文件。
                5。载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。
    第二：
        1。BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化
        2。这样，我们就不能发现一些存在的Spring的配置问题。如果Bean的某一个属性没有注入，BeanFacotry加载后
        3。直至第一次使用调用getBean方法才会抛出异常。
    第三：
        1。ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。
        2。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入
        3。ApplicationContext启动后预载入所有的单实例Bean，通过预载入单实例bean,确保当你需要的时候，你就不用等待，因为它们已经创建好了。
        4。相对于基本的BeanFactory，ApplicationContext唯一的不足是占用内存空间。当应用程序配置Bean较多时，程序启动较慢
        5。BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。
        6。BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。

6、请解释Spring Bean的生命周期？
    首先说一下Servlet的生命周期：实例化，初始init，接收请求service，销毁destroy；
    Spring上下文中的Bean生命周期也类似，如下：
    1。实例化Bean：
        1。对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入
        2。另一个尚未初始化的依赖时，容器就会调用createBean进行实例化
        3。对于ApplicationContext容器，当容器启动结束后，通过获取BeanDefinition对象中的信息，实例化所有的bean
    2。设置对象属性（依赖注入）：
        1。实例化后的对象被封装在BeanWrapper对象中，紧接着，Spring根据BeanDefinition中的信息
        2。以及通过BeanWrapper提供的设置属性的接口完成依赖注入。
    3。处理Aware接口：
        接着，Spring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给Bean：
            1。如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的就是Spring配置文件中Bean的id值；
            2。如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()方法，传递的是Spring工厂自身。
            3。如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文；
    4。BeanPostProcessor：
        1。如果想对Bean进行一些自定义的处理，那么可以让Bean实现了BeanPostProcessor接口
        2。那将会调用postProcessBeforeInitialization(Object obj, String s)方法。
    5。InitializingBean 与 init-method：
        如果Bean在Spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法。
        1。如果这个Bean实现了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法
        2。由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术；

    6。DisposableBean：
        当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法；
    7。destroy-method：
        最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。

7、 解释Spring支持的几种bean的作用域。
    Spring容器中的bean可以分为5个范围：
    1。singleton：默认，每个容器中只有一个bean的实例，单例的模式由BeanFactory自身来维护
    2。prototype：为每一个bean请求提供一个实例。
    3。request：为每一个网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收。
    4。session：与request范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效。
    5。global-session：
        1。全局作用域，global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。
        2。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。
        3。全局作用域与Servlet中的session作用域效果相同。

8、Spring框架中的单例Beans是线程安全的么？
    1。Spring框架并没有对单例bean进行任何多线程的封装处理
    2。关于单例bean的线程安全和并发问题需要开发者自行去搞定
9、Spring如何处理线程并发问题？
    1。在一般情况下，只有无状态的Bean才可以在多线程环境下共享，在Spring中
    2。绝大部分Bean都可以声明为singleton作用域
    3。因为Spring对一些Bean中非线程安全状态采用ThreadLocal进行处理，解决线程安全问题。
    解决问题：
        ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访问冲突问题。
        ThreadLocal：
            1。采用了“空间换时间”的方式。
            2。会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突
            3。因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了
            4。ThreadLocal提供了线程安全的共享对象，在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。
        线程同步：
            1。用了“时间换空间”的方式，仅提供一份变量，不同的线程在访问前需要获取锁
            2。没获得锁的线程则需要排队。
10-1、Spring基于xml注入bean的几种方式：
    1。Set方法注入；
    2。构造器注入：①通过index设置参数的位置；②通过type设置参数类型；
    3。静态工厂注入；
    4。实例工厂；

11。Spring拦截器分类
spring中拦截器主要分两种，一个是HandlerInterceptor，一个是MethodInterceptor。
HandlerInterceptor：
概念：
    是springMVC项目中的拦截器，它拦截的目标是请求的地址，比MethodInterceptor先执行
作用：
1。
2，
MethodInterceptor：








