UML
    概念：
        1。统一建模语言(Unified Modeling Language,UML)是一种为面向对象系统的产品进行说明
        2.可视化和编制文档的一种标准语言,是非专利的第三代建模和规约语言。
        3.UML使用面向对象设计的的建模工具，但独立于任何具体程序设计语言。
    绘图规范：
        参考
            com/suixingpay/profit/document/UML/图片/UMl绘制图规范.png
    事物描述-划重点
        1。类(Class)
        2。接口(Interface)
        3。用例(Usecase)
        4。包(Package)
    事物关系描述：
        关联(Association):
            概念：
                是一种拥有的关系，具有方向性。
            表示一
                用带普通箭头的实线表示，箭头指向被拥有者

            表示二：
                或不用箭头的实线表示

        聚合(Aggregate):
            概念：
                是整体与部分的关系
            表示：
                用带空心菱形的实线表示，菱形指向整体，箭头指向个体。

        组合(Combination):
            概念：
                整体与部分的关系，组合比聚合更加严格
            表示：
                用带实心菱形的实线表示，菱形指向整体，箭头指向个体。
        泛化(Generalization):(继承)
            概念：
                表示一个更泛化的元素和一个更具体的元素之间的关系，与继承是同一个概念。
            表示：
                用带三角箭头的实线表示，箭头指向父类。

        实现：
            概念：
                类与接口的关系，类实现接口
            表示：
                用带三角箭头的虚线表示，箭头指向父接口。
        依赖：
            概念：
                如果一个类的改动会影响到另一个类，则两个类之间存在依赖关系，一般而言，依赖是单向的。
            表示：
                用带普通箭头的虚线表示，箭头指向被依赖者。

    类图：
        + 表示public
        - 表示private
        # 表示protected
        ~ 表示default，可省略不写

        字段和方法返回值的数据类型非必须。
        抽象类或抽象方法用斜体表示。
        静态类或静态方法加下划线。
        如果是接口在类名上方加<<Interface>>。

        类图中的关系：
            箭头方向：
                从子类指向父类。
                记忆技巧：
                    1。定义子类是需要通过extends关键字指定父类;
                    2。子类一定是知道父类定义的，但父类并不知道子类的定义;
                    3。只有知道对方信息时才能指向对方;
                    4。所以箭头的方向是从子类指向父类。
            继承/实现:
                用线条连接两个类。
                记忆技巧：
                    1。空心三角箭头表示继承或实现。
                    2。实线表示继承，是is-a的关系，表示扩展，不虚，很结实;
                    3。虚线表示实现，虚线代表“虚”无实体。
            关联/依赖:
                用线条连接两个类。
                记忆技巧：
                    1：虚线表示依赖关系
                        理解记忆
                            1。临时用一下，若即若离，虚无缥缈，若有若无;
                            2。表示一种使用关系，一个类需要借助另一类来实现功能;
                        具体应用：
                            一般是一个类将另一个类作为参数使用，或作为返回值
                    2。实线表示关联关系:
                        理解记忆：
                            1。关系稳定，实打实的关系，铁哥们;
                            2。表示一个类对象和另一个类对象有关联;
                        具体应用：
                            通常是一个类中有另一个类对象作为属性。
            组合/聚合：
                用菱形表示。
                记忆技巧：
                    1。菱形就是像是一个盛东西的器皿(比如盘子);
                    2。聚合:
                        1。空心菱形，代表空器皿里可以放很多相同的东西， 聚集在一起(箭头方向所指的类);
                        2。整体和局部的关系，两者有独立的生命周期，是has-a的关系; 弱关系，消极的词:弱-空。
                    3。组合:
                        1。实心菱形，代表器皿里已经有实体结构的存在，生死与共;
                        2。整体与局部的关系，和聚合关系对比，关系更加强烈;
                        3。两者具有相同的生命周期，contains-a的关系;
                        4。强关系，积极的词:强-满。
            注意：
                UML类关系图中，没有实心箭头。
            参考：
                案例分析大话设计模式.png
    时序图：(Sequence Diagrams)
        概念：
            1。描述对象之间消息的发送顺序，强调时间顺序。
            2。是一个二维图
                1。横轴表示对象，纵轴表示时间，
                2。消息在各对象之间横向传递，依照时间顺序纵向排列
            3。用箭头表示消息、用竖虚线表示对象生命线。
        作用：
            1。展示对象之间交互的顺序。
                解释：
                    将交互行为建模为消息传递，通过描述消息是如何在对象间发送和接收的来动态展示对象之间的交互;
            2。相对于其他UML图，时序图更强调交互的时间顺序;
            3。可以直观的描述并发进程。
        组成元素：
            角色(Actor)
            对象(Object)
            生命线(Lifeline)
            控制焦点(Focus of Control) { }
            消息(Message)

        自关联消息
        组合片段
        参考
            1。时序图组成元素之组合片段.png
            2。时序图案例分析.png
    在线绘制：
        processON网站

04 | 理论一:当谈论面向对象的时候，我们到底在谈论什么
    什么是面向对象编程和面向对象编程语言?
        面向对象编程：
            概念：
                1。英文缩写是 OOP，全称是 Object Oriented Programming
                2。是一种编程范式或编程风格
                3。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石 。
            非常重要的概念和基础的概念：
                    类(class)和对象 (object)。
        面向对象编程语言：
            概念：
                1。英文缩写是 OOPL，全称是 Object Oriented Programming Language。
                2。是支持类或对象的语法机制，并有现成的语法机制
                3。能方便地实现面向对象编程四大特性(封装、抽象、继承、多态)的编程语言。
            语言：
                比如 Java、C++、Go、Python、C#、Ruby、JavaScript、Objective-C、Scala、 PHP、Perl 等等
    如何判定某编程语言是否是面向对象编程语言?
        实例一：
            1。我们在面向对象编程的过程中，经常会遇到 is-a 这种类关系(比如狗是一种动物)
            2。而继承这个特性就能很好地支持这种 is-a 的代码设计思路，并且解决代码复用的问题，所以，继承就成了面向对象编程的四大特性之一
            3。但是随着编程语言的不断迭代、演化，人们发现继承这种特性容易造成层次不清、代码混乱
            4。所以，很多编程语言在设计的时候就开始摒弃继承特性，比如 Go 语言
            5。但是，我们并不能因为它摒弃了继承特性，就一刀切地认为它不是面向对象编程语言了。
        评判：
            1。只要某种编程语言支持类或对象的语法概念，并且以此作为组织代码的基本单元
            2。那就可以被粗略地认为它就是面向对象编程语言了。
            3。至于是否有现成的语法机制，完全地支持了面向对象编程的四大特性、是否对四大特性有所取舍和优化，可以不作为判定的标准
            4。按照严格的定义，很多语言都不能算得上面向对象编程语言，但按照不严格的定义来讲，现在流行的大部分编程语言都是面向对象编程语言。
    什么是面向对象分析和面向对象设计?
        面向对象分析：
            概念：
                英文缩写是 OOA，全称是 Object Oriented Analysis
        面向对象设计：
            概念：
                英文缩写是 OOD，全称是 Object Oriented Design
        关联：
            OOA、OOD、OOP 三个连在一起就是面向对象分析、设计、编程(实现)，正好是面向对象软件开发要经历的三个阶段。
            原因：
                因为我们是围绕着对象或类来做需求分析和设计的。
            流程：
                1。分析和设计两个阶段最终的产出是类的设计，包括程序被拆解为哪些类
                2。每个类有哪些属性方法，类与类之间如何交互等等
                3。它们比其他的分析和设计更加具体、更加落地、更加贴近编码，更能够顺利地过渡到面向对象编程环节
                4。这也是面向对象分析和设计，与其他分析和设计最大的不同点。
        做什么：
            面向对象分析：就是要搞清楚做什么
            面向对像设计：就是要搞清楚怎么做
            面向对象编程：就是将分析和设计的的结果翻译成代码的过程

    什么是 UML?我们是否需要 UML?
        背景：
            1。讲到面向对象分析、设计、编程，我们就不得不提到另外一个概念，那就是 UML(Unified Model Language)，统一建模语言
            2。很多讲解面向对象或设计模式的书籍，常用它来画图表达面向对象或设计模式的设计思路。
        UML介绍：
            1。UML 是一种非常复杂的东西。它不仅仅包含我们常提到类图，还有用例图、顺序图、活动图、状态图、组件图等
            2。即便仅仅使用类图，学习成本也是很高的。就 单说类之间的关系，UML 就定义了很多种，比如泛化、实现、关联、聚合、组合、依赖 等。
        缺点：
            1。要想完全掌握，并且熟练运用这些类之间的关系，来画 UML 类图，肯定要花很多的学习精力。
            2。而且，UML 作为一种沟通工具，即便你能完全按照 UML 规范来画类图，可对于不熟 悉的人来说，看懂的成本也还是很高的。

05 | 理论二:封装、抽象、继承、多态分别可以解决哪些编程问题?
封装(Encapsulation)
概念：
1。叫作信息隐藏或者数据访问保护
2。类通过暴露有限的访问接口，授权外部仅能通过类提供的方式(或者叫函数)来访问内部信息或者数据
案例：
参考05讲虚拟钱包；

