工厂模式：
    用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类）由给定的参数来决定创建哪种类型的对象
    简单工厂：
        将if-else单独抽取出一个独立的工厂类，生产对象

    工厂方法：
        思路：多态--》工厂--》工厂的工厂
        场景：
            当对象的创建逻辑比较复杂，不只是简单的 new 一下就可以
        原因：
            将复杂的创建逻辑拆分到多个工厂类中，让每个工厂类都不至于过于复杂

    抽象工厂：
        场景：
            让一个工厂负责创建多个不同类型的对象（IRuleConfigParser、ISystemConfigParser 等），而不是只创建一种 parser对象
        作用：
            这样就可以有效地减少工厂类的个数
建造者模式：
    用来创建一种类型的复杂对象，通过设置不同的可选参数，“定制化”地创建不同的对象、
    1.放在builder中来做：
         校验逻辑放到这里来做，包括必填项校验、依赖关系校验、约束条件校验等
    2.避免无效状态的存在：
        例子：
            Rectangle r = new Rectange();
              // r is invalid r.setWidth(2);
              // r is invalid r.setHeight(3);
              // r is valid

