谈谈你对Java平台的理解
    Java本身是一种面向对象的语言，最显著的特性有两个方面，一是所谓的“书写一次，到处运行”(Write once, run anywhere)，能够非常容易地获得跨平台能力;\
      另外就是垃圾收 集(GC, Garbage Collection)，Java通过垃圾收集器(Garbage Collector)回收分配内存，大部分情况下，程序员不需要自己操心内存的分配和回收。
  Java是解释执行：通过Javac编译成为字节码，通过jvm内嵌的解释器将字节码转换成为最终的机器码。但是常见的JVM都提供JIT，JIT能够在运行时将热点代码编译成机器码，这种情况下部分热点代码就属于编译执行，而不是解释执行了
    参考文章：https://www.cnblogs.com/chanshuyi/p/jvm_serial_04_from_source_code_to_machine_code.html
    Java特性:
      面向对象(封装，继承，多态)
      平台无关性(JVM运行.class文件)
      语言(泛型，Lambda)
      类库(集合，并发，网络，IO/NIO)
      JRE(Java运行环境，JVM，类库)
      JDK(Java开发工具，包括JRE，javac，诊断工具)
    Java是解析运行吗?
    不正确!
    1，Java源代码经过Javac编译成.class文件
    2，.class文件经JVM解析或编译运行。
    (1)解析:.class文件经过JVM内嵌的解析器解析执行。
    (2)编译:存在JIT编译器(Just In Time Compile 即时编译器)把经常运行的代码作为"热点代码"编译与本地平台相关的机器码，并进行各种层次的优化。 ∫
    (3)AOT编译器: Java 9提供的直接将所有代码编译成机器码执行。
    首先javac编译器将源代码编译成字节码。 然后jvm类加载器加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度相对会比较慢。有些方法和代码块是高频率调用的，
   也就是所谓的热点代码，所以引进jit技术，提前将这 类字节码直接编译成本地机器码。这样类似于缓存技术，运行时再遇到这类代码直接可以执行，而不是先解释后执行。
Exception和Error有什么区别?（先从概念理解，实践，再扩展）
异常的两个基本原则：
   通常情况下，程序中自定义的异常应为检查异常，以便最大化利用 Java 编译器的编译时检查。
    第一，尽量不要捕获类似Exception这样的通用异常，而是应该捕获特定异常，
    第二，不要生吞(swallow)异常。这是异常处理中要特别注意的事情，因为很可能会导致非常难以诊断的诡异情况
    1.异常的父类。throwable.
    2.异常的分类。error错误。exception异常。（受检异常（其他属于），非受检异常（RuntimeException 和 Error））
    3。对异常分类的使用。error是jvm环境运行错误，不可进行捕获。包括，throwable。exception是程序上的错误，需要在错误时进行捕获，恢复正常运行的形态。对异常捕获，最好进行异常 类型最匹配的形式，这样具有日志堆栈信息便于查询，排错。
    4。异常的使用是比较消耗性能。消耗性能的方式有try代码快，与生成exception的堆栈快照。
    5。注意信息。在生成exception错误信息时，不能使用exception自带方法进行输出。这种方式，不清楚会输出到什么地方，不好排查。
    自定义异常：从两个点考虑
     1是否需要定义成Checked Exception，因为这种类型设计的初衷更是为了从异常情况恢复，作为异常设计者，我们往往有充足信息进行分类。
     2。在保证诊断信息足够的同时，也要考虑避免包含敏感信息，因为那样可能导致潜在的安全问题
   1.异常:这种情况下的异常，可以通过完善任务重试机制，当执行异常时，保存当前任务信息加入重试队列。重试的策略根据业务需要决定，当达到重试上限依然无法成功，记录任务执行失 败，同时发出告警。
   2.日志:类比消息中间件，处在不同线程之间的同一任务，简单高效一点的做法可能是用traceId/requestId串联。有些日志系统本身支持MDC/NDC功能，可以串联相关联的日志。

谈谈final、finally、 finalize有什么不同?

    finalize：不管怎么折腾，任意一个对象的finalize只至多执行一次，一旦对象变为Finalized，就怎么也不会在回到F-Queue去了。当然没有机会再执行finalize了。（可能在执行finalize过程会存活）
        对于finalize，我们要明确它是不推荐使用的，业界实践一再证明它不是个好的办法，在Java 9中，甚至明确将Object.finalize()标记为deprecated!如果没有特别的原因，不要实
        现finalize方法，也不要指望利用它来进行资源回收。：，你无法保证finalize什么时候执行，执行的是否符合预期。使用不当会影响性能，导致程序死锁、挂起等。

    final：可以用来修饰类、方法、变量，分别有不同的意义，fnal修饰的class代表不可以继承扩展，fnal的变量是不可以修改的，而fnal的方法也是不可以重写的(override)。
        final不是immutable（不可变的）,strList对象不可变，但是对象的行为是可以变化的
        final Lis<String> strLis = new ArrayLis<>(); 
        strLis.add("Hello");
        strLis.add("world");
        Lis<String> unmoditfableStrLis = List.of("hello", "world"); 
        unmoditfableStrLis.add("again");
        要实现immutable的类，需要做到：参考String：https://www.cnblogs.com/jaylon/p/5721571.html
        将class自身声明为final，这样别人就不能扩展来绕过限制了。
        将所有成员变量定义为private和final，并且不要实现setter方法。
        通常构造对象时，成员变量使用深度拷贝来初始化，而不是直接赋值，这是一种防御措施，因为你无法确定输入对象不被其他人修改。
        如果确实需要实现getter方法，或者其他可能会返回内部状态的方法，使用copy-on-write原则，创建私有的copy。
    finally则是Java保证重点代码一定要被执行的一种机制。我们可以使用try-fnally或者try-catch-fnally来进行类似关闭JDBC连接、保证unlock锁等动作。
        try {
        // do something Sysem.exit(1);
        } finally{
        Sysem.out.println(“Print from fnally”); //不会执行
        }

04。强引用、软引用、弱引用、幻象引用有什么区别?具体使用场景是什么?
    在Java语言中，除了基本数据类型外，其他的都是指向各类对象的对象引用;Java中根据其生命周期的长短，将引用分为4类。
    1 强引用
      特点:我们平常典型编码Object obj = new Object()中的obj就是强引用。通过关键字new创建的对象所关联的引用就是强引用。 
      当JVM内存空间不足，JVM宁愿抛出OutOfMemoryError运 行时错误(OOM)，使程序异常终止，也不会靠随意回收具有强引用的“存活”对象来解决内存不足的问题。
      对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式 地将相应(强)引用赋值为 null，就是可以被垃圾收集的了，具体回收时机还是要看垃圾收集策略。
    2 软引用
    特点:软引用通过SoftReference类实现。 软引用的生命周期比强引用短一些。只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象:即JVM 会确保在抛出 OutOfMemoryError 之前，
    清理软引用指向的对象。软引用可以和一个引用队列(ReferenceQueue)联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用 队列中。
    后续，我们可以调用ReferenceQueue的poll()方法来检查是否有它所关心的对象被回收。如果队列为空，将返回一个null,否则该方法返回队列中前面的一个Reference对象。
    应用场景:软引用通常用来实现内存敏感的缓存。如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。
    3 弱引用
    弱引用通过WeakReference类实现。 弱引用的生命周期比软引用短。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了具有弱引用的对象，
    不管当前内存空间足够与否，都会 回收它的内存。由于垃圾回收器是一个优先级很低的线程，因此不一定会很快回收弱引用的对象。
    弱引用可以和一个引用队列(ReferenceQueue)联合使用，如果弱引用所引用的对象被垃圾 回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。
    应用场景:弱应用同样可用于内存敏感的缓存。
    4 虚引用
    特点:虚引用也叫幻象引用，通过PhantomReference类来实现。无法通过虚引用访问对象的任何属性或函数。幻象引用仅仅是提供了一种确保对象被 fnalize 以后，
    做某些事情的机制。如果 一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用必须和引用队列 (ReferenceQueue)联合使用。
    当垃圾回收器准备回收一个对象时，如 果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。
    ReferenceQueue queue = new ReferenceQueue ();
    PhantomReference pr = new PhantomReference (object, queue);
    程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之
    前采取一些程序行动。
    应用场景:可用来跟踪对象被垃圾回收器回收的活动，当一个虚引用关联的对象被垃圾收集器回收之前会收到一条系统通知。

    知识扩展：
    1.对象可达性状态流转分析
    2.引用队列(ReferenceQueue)使用
    3.显式地影响软引用垃圾收集
    4.诊断JVM引用情况
    5.Reachability Fence

第5讲 | String、StringBufer、StringBuilder有什么区别?
    1 String
        (1) String的创建机理 由于String在Java世界中使用过于频繁，Java为了避免在一个系统中产生大量的String对象，引入了字符串常量池。其运行机制是:创建一个字符串时，首先检查池中是否有值相同的字符串对 象，如果有则不需要创建直接从池中刚查找到的对象引用;如果没有则新建字符串对象，返回对象引用，并且将新创建的对象放入池中。但是，通过new方法创建的String对象是不检查字符串 池的，而是直接在堆区或栈区创建一个新的对象，也不会把对象放入池中。上述原则只适用于通过直接量给String对象引用赋值的情况。
            举例:String str1 = "123"; //通过直接量赋值方式，放入字符串常量池
            String str2 = new String(“123”);//通过new方式赋值方式，不放入字符串常量池
            注意:String提供了inter()方法。调用该方法时，如果常量池中包括了一个等于此String对象的字符串(由equals方法确定)，则返回池中的字符串。否则，将此String对象添加到池中，并且 返回此池中对象的引用。
        (2) String的特性
            [A] 不可变。是指String对象一旦生成，则不能再对它进行改变。不可变的主要作用在于当一个对象需要被多线程共享，并且访问频繁时，可以省略同步和锁等待的时间，从而大幅度提高系统 性能。不可变模式是一个可以提高多线程程序的性能，降低多线程程序复杂度的设计模式。
            [B] 针对常量池的优化。当2个String对象拥有相同的值时，他们只引用常量池中的同一个拷贝。当同一个字符串反复出现时，这个技术可以大幅度节省内存空间。
    2 StringBufer/StringBuilder
        StringBufer和StringBuilder都实现了AbstractStringBuilder抽象类，拥有几乎一致对外提供的调用接口;其底层在内存中的存储方式与String相同，都是以一个有序的字符序列(char类型 的数组)进行存储，不同点是StringBufer/StringBuilder对象的值是可以改变的，并且值改变以后，对象引用不会发生改变;两者对象在构造过程中，首先按照默认大小申请一个字符数组，由 于会不断加入新数据，当超过默认大小后，会创建一个更大的数组，并将原先的数组内容复制过来，再丢弃旧的数组。因此，对于较大对象的扩容会涉及大量的内存复制操作，如果能够预先评 估大小，可提升性能。
        唯一需要注意的是:StringBufer是线程安全的，但是StringBuilder是线程不安全的。可参看Java标准类库的源代码，StringBufer类中方法定义前面都会有synchronize关键字。为 此，StringBufer的性能要远低于StringBuilder。
    3 应用场景 
        [A]在字符串内容不经常发生变化的业务场景优先使用String类。例如:常量声明、少量的字符串拼接操作等。如果有大量的字符串内容拼接，避免使用String与String之间的“+”操作，因为这
            样会产生大量无用的中间对象，耗费空间且执行效率低下(新建对象、回收对象花费大量时间)。
        [B]在频繁进行字符串的运算(如拼接、替换、删除等)，并且运行在多线程环境下，建议使用StringBufer，例如XML解析、HTTP参数解析与封装。
        [C]在频繁进行字符串的运算(如拼接、替换、删除等)，并且运行在单线程环境下，建议使用StringBuilder，例如SQL语句拼装、JSON封装等。

第6讲 | 动态代理是基于什么原理?
    编程语言分类角度一：
        动态类型：
            概念：
                语言类型信息是在运行时检查
        静态类型：
            概念：
                语言类型信息是在编译时检查
    编程语言分类角度二：
        强类型：
            概念：
                不同类型变量赋值显示进行类型转换
        弱类型：
            概念：
                不同类型变量赋值强制进行类型转换
    问题一：
        如何分类 Java 语言呢？
        答案：
            Java 是静态的强类型语言
            原因：
                提供了类似反射等机制，也具备了部分动态类型语言的能力。
    问题：
        谈谈 Java 反射机制，动态代理是基于什么原理？
    反射机制：
        概念：
            Java 语言提供的一种基础功能，赋予程序在运行时自省的能力
        作用：
            通过反射我们可以直接操作类或者对象
            例子：
                1。比如获取某个对象的类定义，获取类声明的属性和方法
                2。调用方法或者构造对象，甚至可以运行时修改类定义
        理解：
            1。看一下 java.lang 或 java.lang.reflect 包下的相关抽象，就会有一个很直观的印象了
            2。Class、Field、Method、Constructor 等，这些完全就是我们去操作类和对象的元数据对应
        方法：
            AccessibleObject.setAccessible​(boolean flag)
            概念：
                1。它的子类也大都重写了这个方法，这里的所谓 accessible 可以理解成修饰成员的 public、protected、private
                2。这意味着我们可以在运行时修改成员访问限制！
            应用：
                遍布我们的日常开发、测试、依赖注入等各种框架中。
                例子：
                    1。在 O/R Mapping 框架中，我们为一个 Java 实体对象，运行时自动生成 setter、getter 的逻辑
                    2。这是加载或者持久化数据非常必要的，框架通常可以利用反射做这个事情
                    3。而不需要开发者手动写类似的重复代码。

    动态代理：
        概念：
            1。一种方便运行时动态构建代理、动态处理代理方法调用的机制
            2。它是一个代理机制。
                代理：
                    概念：
                        可以看作是对调用目标的一个包装，这样我们对目标代码的调用不是直接发生的，而是通过代理完成
                    作用：
                        可以让调用者与实现者之间解耦
                    例子：
                        1。比如进行 RPC 调用，框架内部的寻址、序列化、反序列化等
                        2。对于调用者往往是没有太大意义的，通过代理，可以提供更加友善的界面。
                发展：
                    静态----》动态
        应用：
            1。比如用来包装 RPC 调用
            2。面向切面的编程（AOP）
                OOP的缺点：
                    对于跨越不同对象或类的分散、纠缠逻辑表现力不够
                    例子：
                        1。在不同模块的特定阶段做一些事情
                        2。类似日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等
                        方法：
                            AOP
                                优点：
                                    1。通过（动态）代理机制可以让开发者从这些繁琐事项中抽身出来
                                    2。大幅度提高了代码的抽象程度和复用度。
                                应用：
                                    我们在软件设计和实现中的类似代理，如 Facade、Observer 等很多设计目的，都可以通过动态代理优雅地实现。
        实现方式一：
            JDK 自身提供的动态代理
                原理：
                    主要利用了上面提到的反射机制
                具体实现：
                    1。首先，实现对应的 InvocationHandler
                    2。然后，以接口 Hello 为纽带，为被调用目标构建代理对象
                    3。进而应用程序就可以使用代理对象间接运行调用目标的逻辑，代理为应用插入额外逻辑，提供了便利的入口。
                参考代码：
                    profit.jikeshijian.javahexinjishu.MyDynamicProxy06
                缺点：
                    它是以接口为中心的，相当于添加了一种对于被调用者没有太大意义的限制
                    优化方法：
                        选择 cglib 方式
                        优点：
                            可以达到近似使用被调用者本身的效果
        实现方式二：
            利用传说中更高性能的字节码操作机制
            例子：
                类似 ASM、cglib（基于 ASM）、Javassist 等。

        JDK Proxy 的优势：
            1。最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。
            2。平滑进行 JDK 版本升级，而字节码类库通常需要进行更新以保证在新版 Java 上能够使用。
            3。代码实现简单。

        基于类似 cglib 框架的优势：
            1。有的时候调用目标可能不便实现额外接口，从某种角度看，限定调用者实现接口是有些侵入性的实践，类似 cglib 动态代理就没有这种限制
            2。只操作我们关心的类，而不必为其他相关类增加工作量
            3。高性能。
        扩展：
            1。性能未必是唯一考量，可靠性、可维护性、编程工作量等往往是更主要的考虑因素
            2。毕竟标准类库和反射编程的门槛要低得多，代码量也是更加可控的

第7讲 | int和Integer有什么区别？
    原始数据类型：
        boolean、byte 、short、char、int、float、double、long
    int：
        概念：
            是 Java 的 8 个原始数据类型之一
    Integer
        概念：
            1。是 int 对应的包装类，它有一个 int 类型的字段存储数据
            2。并且提供了基本操作
                例子：
                    数学运算、int 和字符串之间转换等
        java 5：
            1。引入了自动装箱和自动拆箱功能（boxing/unboxing），Java 可以根据上下文，自动进行转换，极大地简化了相关编程。
                自动装箱：
                    1。Java 平台为我们自动进行了一些转换，保证不同的写法在运行时等价
                    2。它们发生在编译阶段，也就是生成的字节码是一致的。
                    例子：
                        javac 替我们自动把装箱转换为 Integer.valueOf()
            2。值缓存，新增了静态工厂方法 valueOf，在调用它的时候会利用一个缓存机制
                优点：
                    带来了明显的性能改进
                注意：
                    默认缓存是 -128 到 127 之间。
    1。案例：
        1。建议避免无意中的装箱、拆箱行为，尤其是在性能敏感的场合
        2。创建 10 万个 Java 对象和 10 万个整数的开销可不是一个数量级的
        3。不管是内存使用还是处理速度，光是对象头的空间占用就已经是数量级的差距了。
        方法一：
            1。使用原始数据类型、数组甚至本地代码实现等
            2。在性能极度敏感的场景往往具有比较大的优势，用其替换掉包装类、动态数组
        方法二：
            思路：
                一些追求极致性能的产品或者类库，会极力避免创建过多对象
        以我们经常会使用到的计数器实现为例，下面是一个常见的线程安全计数器实现
        参考代码实现：
            profit.jikeshijian.javahexinjishu.Counter07
            利用原始数据类型，可以将其修改为
                profit.jikeshijian.javahexinjishu.CompactCounter07
    2. 源码分析
        Integer 的职责：
            1。主要包括各种基础的常量，比如最大值、最小值、位数等；
            2。前面提到的各种静态工厂方法 valueOf()；
            3。获取环境变量数值的方法
            4。各种转换方法，比如转换为不同进制的字符串，如 8 进制，或者反过来的解析方法等
        缓存范围：
            默认是 -128 到 127
            问题：
                应用会频繁使用更大的数值，这时候应该怎么办呢？
            答案：
                缓存上限值实际是可以根据需要调整的，JVM 提供了参数设置：
                -XX:AutoBoxCacheMax=N
        不可变模型：
            背景：
                分析字符串的设计实现时，提到过字符串是不可变的
                作用：
                    保证了基本的信息安全和并发编程中的线程安全
            例子：
                不管是 Integer 还 Boolean 等，都被声明为“private final”，它们同样是不可变类型！
                原因：
                    1。比如 Integer 提供了 getInteger() 方法，用于方便地读取系统属性
                    2。我们可以用属性来设置服务器某个服务的端口
                    3。如果我可以轻易地把获取到的 Integer 对象改变为其他数值，这会带来产品可靠性方面的严重问题。
    3。包装类：
        定义了类似 SIZE 或者 BYTES 这样的常量
        问题：
            我使用 32 位 JDK 开发编译的程序，运行在 64 位 JDK 上，需要做什么特别的移植工作吗？
            答案：
                1。这种移植对于 Java 来说相对要简单些，因为原始数据类型是不存在差异的
                2。不管是 32 位还是 64 位环境，开发者无需担心数据的位数差异。
                3。应用开发者更多需要考虑的是容量、能力等方面的差异。
    4。Java 原始数据类型和引用类型局限性
        1。原始数据类型和 Java 泛型并不能配合使用
            原因：
                1。Java 的泛型某种程度上可以算作伪泛型，它完全是一种编译期的技巧
                2。Java 编译期会自动将类型转换为对应的特定类型，这就决定了使用泛型
                3。必须保证相应类型可以转换为 Object。
        2。无法高效地表达数据，也不便于表达复杂的数据结构，比如 vector 和 tuple
            原因：
                1。Java 的对象都是引用类型，如果是一个原始数据类型数组，它在内存里是一段连续的内存
                2。而对象数组则不然，数据存储的是引用，对象往往是分散地存储在堆的不同位置。
            优点：
                带来了极大灵活性
            缺点：
                导致了数据操作的低效，尤其是无法充分利用现代 CPU 缓存机制。

第8讲 | 对比Vector、ArrayList、LinkedList有何区别？
    Vector：
        特点：
            1。是 Java 早期提供的线程安全的动态数组
            2。内部是使用对象数组来保存数据
                1。可以根据需要自动的增加容量
                2。当数组已满时，会创建新的数组，并拷贝原有数组数据。(扩容时会提高 1 倍)
        建议：
            如果不需要线程安全，并不建议选择，毕竟同步是有额外开销的
        应用：
            其内部元素以数组形式顺序存储的，所以非常适合随机访问的场合(安全)
        缺点：
            尾部插入和删除元素，往往性能会相对较差(安全)
    ArrayList：
        特点：
            1。应用更加广泛的动态数组实现，
            2。它本身不是线程安全的
            3。。ArrayList 也是可以根据需要调整容量。(扩容时是增加50%)
        优点：
            性能要好很多
        缺点：
            除了尾部插入和删除元素，往往性能会相对较差(不安全)
        应用：
            其内部元素以数组形式顺序存储的，所以非常适合随机访问的场合(不安全)
    LinkedList：
        特点：
            1。Java 提供的双向链表
            2。不需要像上面两种那样调整容量
            3。不是线程安全
        优点：
            节点插入、删除却要高效得多
        缺点：
            随机访问性能则要比动态数组慢。
    三者对比：
        共同点
            都是实现集合框架中的 List，也就是所谓的有序集合，具体功能也比较近似
                例子：
                    1。比如都提供按照位置进行定位、添加或者删除的操作
                    2。都提供迭代器以遍历其内容等
        区别：
            因为具体的设计区别，在行为、性能、线程安全等方面，表现又有很大不同
    面试：
    考察点一：
        Java 集合框架的设计结构
        参考：
            第08讲Java 的集合框架.png
        图解：
            1。Java 的集合框架，Collection 接口是所有集合的根，然后扩展开提供了三大类集合
                1。List
                    概念：
                        是我们前面介绍最多的有序集合，它提供了方便的访问、插入、删除等操作。
                2。Set
                    概念：
                        Set 是不允许重复元素的
                        强调：
                            这是和 List 最明显的区别，也就是不存在两个对象 equals 返回 true
                    应用：
                        在日常开发中有很多需要保证元素唯一性的场合
                3。Queue/Deque
                    概念：
                        1。则是 Java 提供的标准队列结构的实现，除了集合的基本功能
                        2。它还支持类似先入先出（FIFO， First-in-First-Out）或者后入先出（LIFO，Last-In-First-Out）等特定行为
                    应用：
                        这里不包括 BlockingQueue，因为通常是并发编程场合，所以被放置在并发包里。
            2。每种集合的通用逻辑，都被抽象到相应的抽象类之中
                例子：
                    比如 AbstractList 就集中了各种 List 操作的通用部分
            3。这些集合不是完全孤立的
                例子：
                    LinkedList 本身，既是 List，也是 Deque 哦。
                源码：
                    例子一：
                        1。TreeSet 代码里实际默认是利用 TreeMap 实现的
                        2。Java 类库创建了一个 Dummy 对象“PRESENT”作为 value，然后所有插入的元素其实是以键的形式放入了 TreeMap 里面
                    例子二：
                        HashSet 其实也是以 HashMap 为基础实现的，原来他们只是 Map 类的马甲！
                    扩展：
                        1.需要对各种具体集合实现，至少了解基本特征和典型使用场景，以 Set 的几个实现为例：
                            TreeSet：
                                特点：
                                    支持自然顺序访问
                                缺点：
                                    添加、删除、包含等操作要相对低效（log(n) 时间）。

                            HashSet：
                                特点：
                                    1。利用哈希算法
                                    2。理想情况下，如果哈希散列正常，可以提供常数时间的添加、删除、包含等操作，但是它不保证有序
                                功能：(遍历元素)
                                    1。在遍历元素时，HashSet 性能受自身容量影响
                                    2.所以初始化时，除非有必要，不然不要将其背后的 HashMap 容量设置过大
                            LinkedHashSet：
                                特点：
                                    1。内部构建了一个记录插入顺序的双向链表，
                                    2。因此提供了按照插入顺序遍历的能力
                                    3。也保证了常数时间的添加、删除、包含等操作，这些操作性能略低于 HashSet
                                    原因：
                                        需要维护链表的开销。
                                功能：(遍历元素)
                                    在遍历元素时，由于其内部链表提供的方便，遍历性能只和元素多少有关系。
        2.集合不安全并不代表完全不能支持并发编程的场景，
            方法：
                在 Collections 工具类中，提供了一系列的 synchronized 方法
                例子：
                    List list = Collections.synchronizedList(new ArrayList());
                    原理：
                        1。基本就是将每个基本方法，比如 get、set、add 之类，都通过synchronizd 添加基本的同步支持
                        2。非常简单粗暴，但也非常实用
                注意：
                    1。这些方法创建的线程安全集合，都符合迭代时 fail-fast 行为
                    2。当发生意外的并发修改时，尽早抛出 ConcurrentModificationException 异常，以避免不可预计的行为。


    考察点二：
        Java 提供的主要容器（集合和 Map）类型
    考察点三：
        将问题扩展到性能、并发等领域。
        问题：
            Java 提供的默认排序算法，具体是什么排序方式以及设计思路等。
            分析：
                1。需要区分是 Arrays.sort() 还是 Collections.sort()
                2。底层是调用 Arrays.sort()）；什么数据类型；多大的数据集（太小的数据集，复杂排序是没必要的，Java 会直接进行二分插入排序
            答案：
                情形一：
                    对于原始数据类型
                        1。目前使用的是所谓双轴快速排序（Dual-Pivot QuickSort）
                        2。是一种改进的快速排序算法，早期版本是相对传统的快速排序，你可以阅读源码。
                情形二：
                    对于对象数据类型
                        1。目前则是使用TimSort，思想上也是一种归并和二分插入排序（binarySort）结合的优化排序算法
                        2。TimSort 并不是 Java 的独创，简单说它的思路是查找数据集中已经排好序的分区（这里叫 run），然后合并这些分区来达到排序的目的。
                情形三：
                    java 8：
                        1。引入了并行排序算法（直接使用 parallelSort 方法），这是为了充分利用现代多核处理器的计算能力
                        2。底层实现基于 fork-join 框架，当处理的数据集比较小的时候，差距不明显，甚至还表现差一点
                        3。当数据集增长到数万或百万以上时，提高就非常大了，具体还是取决于处理器和系统环境。
                    扩展一：
                        1。Java 平台支持了 Lambda 和 Stream，相应的 Java 集合框架也进行了大范围的增强
                        2。以支持类似为集合创建相应 stream 或者 parallelStream 的方法实现，我们可以非常方便的实现函数式代码
                    扩展二：
                        Java 8 在语言层面的新特性，允许接口实现默认方法
                        例子：
                            1。阅读 Java 源代码，你会发现，这些 API 的设计和实现比较独特
                            2。它们并不是实现在抽象类里面，而是以默认方法的形式实现在 Collection 这样的接口里
                            3。我们原来实现在类似 Collections 这种工具类中的方法，大多可以转换到相应的接口上
                    扩展三：
                        在 Java 9 中，Java 标准类库提供了一系列的静态工厂方法
                        例子 ：
                            List.of()、Set.of()，大大简化了构建小的容器实例的代码量
                        情形一：
                            1。根据业界实践经验，我们发现相当一部分集合实例都是容量非常有限的
                            2。而且在生命周期中并不会进行修改。但是，在原有的 Java 类库中，我们可能不得不写成：
                            代码：
                                ArrayList list = new ArrayList<>();
                                list.add("Hello");
                                list.add("World");
                        情形二：
                            1。利用新的容器静态工厂方法，一句代码就够了，并且保证了不可变性
                            2。List simpleList = List.of("Hello","world");
                            3。通过各种 of 静态工厂方法创建的实例，还应用了一些我们所谓的最佳实践
                                优点：
                                    1。它是不可变的，符合我们对线程安全的需求
                                    2。它因为不需要考虑扩容，所以空间上更加紧凑等。

第9讲 | 对比Hashtable、HashMap、TreeMap有什么不同？
