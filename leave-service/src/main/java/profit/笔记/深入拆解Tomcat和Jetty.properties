00开篇词 | Java程序员如何快速成长？
    提出问题：
      知识体系在广度和深度上都有问题
    好奇：
      只需要把 Web 应用打成 WAR 包放到它的目录下，启动起来就能通过浏览器来访问了
      方法：
        选择Tomcat来深入研究
          原理：
            1。Servlet 技术是 Web 开发的原点
            2。几乎所有的 Java Web 框架（比如 Spring）都是基于 Servlet 的封装
            3。Spring 应用本身就是一个 Servlet，而 Tomcat 和 Jetty 这样的 Web 容器
          高级技术：
            1。Java 多线程并发编程
            2。Socket 网络编程
            3。反射
          系统设计能力：
            1。面向接口编程、组件化、骨架抽象类、一键式启停、对象池技术
            2。设计模式：模板方法、观察者模式、责任链模式
          结果：
            建立自己的知识体系，也开始独立设计一个系统，独立解决技术难题
            广度：
              概念：，
                1。你的知识是成体系的，从前端到后端、从应用层面到操作系统、从软件到硬件
                2。从开发、测试、部署到运维…有些领域虽然你不需要挖得很深，但是你必须知道这其中的“门道”。
            深度：
              怎么用-》这项技术如何产生的-》背后的原理--》为什么被设计成这样--》甚至还知道如何去改进它
    基础知识：
      1。操作系统
      2。计算机网络
      3。Java 语言
      4。面向对象设计
      5。HTTP 协议
      6。Servlet 规范
    Tomcat 的 Jetty 的总体架构
      总体架构
          1。关注组件的工作原理和设计思路
            思考：
              1。比如这个组件为什么设计成这样
              2。设计者们当时是怎么考虑这个问题的
          2。然后通过源码的剖析，加深你的理解
          3更重要的是，帮你学会在真实的场景下如何运用Java技术。
      对比：
        1。比较它们各自的设计特点
        2。让你对选型有更深的理解。
        3。并且通过思考和总结，帮你从中提炼一些通用的设计原则
        4。以及实现高性能高并发的思路。
      实用：
        1。如何监控 Tomcat 的性能
        2。以及怎么从内存
        3。线程池和 I/O 三个方面进行调优
        4。分析和解决一些你在实际工作中可能会碰到的棘手问题。
      新技术：
        1。比如 WebSocket 和异步 Servlet 等
        2。分析这些新技术是从何而来
        3。以及 Tomcat 和 Jetty 是如何支持的
        4。这些都是 Web 技术的最新动向
        5。你可以在自己的工作中根据需要选用这些新技术。
      经验值：
        1。如何设计 Tomcat 和 Jetty 的
        2。体会他们如何思考问题、如何写代码
        3。比如怎样设计服务端程序的 I/O 和线程模型
        4。怎样写高性能高并发程序
        5。Spring 的 IoC 容器为什么设计成这个样子
        6。设计一个中间件或者框架有哪些套路等…
      如何做：
        1。不仅需要上进心和耐心
        2。保持对知识的好奇心

