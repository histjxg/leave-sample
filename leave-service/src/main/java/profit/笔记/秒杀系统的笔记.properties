开篇词 | 秒杀系统架构设计都有哪些关键点？

    PV：访问量(Page View),即页面访问量
    两方面理解：并发读和并发写
        并发读：核心优化理念是尽量减少用户到服务端来“读”数据，或者让他们读更少的数据
        并发写：处理原则也一样，它要求我们在数据库层面独立出来一个库，做特殊的处理
    系统：高可用、一致性和高性能
        高可用（稳）：虽然我介绍了很多极致的优化思路，但现实中总难免出现一些我们考虑不到的情况，所以要保证系统的高可用和正确性，
                我们还要设计一个 PlanB 来兜底，以便在最坏情况发生时仍然能够从容应对
        一致性（准）：秒杀中商品减库存的实现方式同样关键。
                可想而知，有限数量的商品在同一时刻被很多倍的请求同时来减库存，减库存又分为“拍下减库存”“付款减库存”以及预扣等几种，
                在大并发更新的过程中都要保证数据的准确性，其难度可想而知。
        高性能（块）：秒杀涉及大量的并发读和并发写，因此支持高并发访问这点非常关键
        原则：用户请求的数据尽量少、请求数尽量少、路径尽量短、依赖尽量少，并且不要有单点


01 | 设计秒杀系统时应该注意的5个架构原则
    架构是一种平衡的艺术，而最好的架构一旦脱离了它所适应的场景，一切都将是空谈。
        秒杀：同一个时刻有大量的请求争抢购买同一个商品并完成交易的过程，
                用技术的行话来说就是大量的并发读和并发写。

    架构原则：“4 要 1 不要”
        1。数据要尽量少：
                概念：指用户请求的数据能少就少。请求的数据包括，上传给系统的数据和系统返回给用户的数据（通常就是网页）。
                    扩展：还要求系统依赖的数据能少就少，包括系统完成某些业务逻辑需要读取和保存的数据，这些数据一般是和后台服务以及数据库打交道的。调用其他服务会涉及数据的序列化和反序列化，而这也是 CPU 的一大杀手，同样也会增加延时
                原因：
                    1网络传输需要时间。
                    2不管是请求还是返回服务器需要做处理，写网络时通常都要做压缩和字符编码（耗时）
                例子：
                    1。简化秒杀页面的大小
                    2。去掉不必要的页面装饰效果
                    3。和数据库打交道越少越好，数据越简单，越小越好。

        2。请求数要尽量少：
                    问题
                        1。页面还要包含其他的额外请求。比如  这个页面依赖的 CSS/JavaScript、图片，以及 Ajax 请求等等都定义为“额外请求”，这些额外请求应该尽量少
                        2。每个请求三次握手
                        3。页面依赖和连接数限制
                        4。不同的请求域名不一样，涉及域名解析，耗时更久
                    优化：合并 CSS 和 JavaScript 
                        例子：https://g.xxx.com/tm/xx-b/4.0.94/mods/??module-preview/index.xtpl.js,module-jhs/index.xtpl.js,module-focus/index.xtpl.js
                            服务器端仍然是单个文件各自存放，服务端会有一个解析这个url，然后动态把这些文件合并在一起返回
        3。路径要尽量短：
                    路径：用户发出请求到返回数据这个过程中，需求经过的中间的节点数
                        节点：可以表示为一个系统或者一个新的 Socket 连接，每经过一个节点，一般都会产生一个新的Socket连接
                        问题：每增加一个连接会增加不确定性，从概率统计上来说，加入一次请求经过 5 个节点，每个节点的可用性是 99.9% 的话，
                                那么整个请求的可用性是：99.9% 的 5 次方，约等于 99.5%。
                    优点：增加可用性，可以有效提升性能，并减少延时
                    方法：多个相互强依赖的应用合并部署在一起，远程过程调用（RPC）变成 JVM 内部之间的方法调用
        4。依赖要尽量少：
                    依赖：指的是要完成一次用户请求必须依赖的系统或者服务，这里的依赖指的是强依赖
                        例子：比如说你要展示秒杀页面，而这个页面必须强依赖商品信息、用户信息，还有其他如优惠券、
                            成交列表等这些对秒杀不是非要不可的信息（弱依赖），这些弱依赖在紧急情况下就可以去掉。
                    方法：给系统进行分级，比如 0 级系统、1 级系统、2 级系统、3 级系统，0 级系统如果是最重要的系统，那么 0 级系统强依赖的系统也同样是最重要的系统，以此类推。
        5. 不要有单点：
                单点：是系统架构上的一个大忌，因为单点意味着没有备份，风险不可控，我们设计分布式系统最重要的原则就是“消除单点”。
                   避免单点：
                        关键点是避免将服务的状态和机器绑定，即把服务无状态化，这样服务就可以在机器中随意移动。
                        解藕：把和机器相关的配置动态化，这些参数可以通过配置中心来动态推送，在服务启动时动态拉取下来，我们在这些配置中心设置一些规则来方便地改变这些映射关系。

02 | 如何才能做好动静分离？有哪些方案可选？
“动态数据”和“静态数据”的主要区别就是看页面中输出的数据是否和 URL、浏览者、时间、地域相关，以及是否含有 Cookie 等私密数据。
对静态数据做缓存涉及：
    含义：那些相对不会变化的数据
    第一，你应该把静态数据缓存到离用户最近的地方
        方案：用户浏览器里、CDN 上或者在服务端的 Cache 
    第二，静态化改造就是要直接缓存 HTTP 连接
        例子：eb 代理服务器根据请求 URL，直接取出对应的 HTTP 响应头和响应体然后直接返回，这个响应过程简单得连 HTTP 协议都不用重新组装，甚至连 HTTP 请求头也不需要解析。
    第三，让谁来缓存静态数据也很重要
        Web 服务器（如 Nginx、Apache、Varnish）也更擅长处理大并发的静态文件请求。




高并发系统的几大方向
    1.请求数据尽量少，从而减少cpu消耗
    2.访问路径尽量短，减少节点消耗
    3.强依赖尽量少，减少加载时间
    4.不要有单点，要有备份
    5.减少额外请求，减少加载时间

    1.本地cache一般就是用内存实现，用java集合类型就行
    2.用订阅的方式，在初始化时加载到内存
    3.有两种方法，一是定时更新取3秒，
    二是，主动更新，数据库字段更新后发消息更新缓存，
    这个需要用到一个组件阿里叫metaq就是就是数据库字段更新会产生一条消息。
    另外cache里库存不需要100%和数据库一致，这个在后面的文章也有介绍