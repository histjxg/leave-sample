close_wait和TIME_WAIT问题：

QPS：每秒查询率
TPS：Transactions Per Second（每秒传输的事物处理个数），即服务器每秒处理的事务数。
TPS包括一条消息入和一条消息出，加上一次用户数据库访问
100个用户压测
    timewait：  错误率0.3%  1.280
    问题一：有错误的线程
        猜测：：统计下代码问题，参数问题，还是代码问题
        方法：单独发
        现象：成功的
        推测：并发导致的
tps 60左右：
查询Time_wait的问题，增加切面的方式，查看那个方法导致的问题；

close_wait:200个用户压测报错：
netstat -ant|grep 'CLOSED_WAIT'

100没问题，200就有问题，要不就是负载的问题，要不就是中间件设置参数的问题

1增加切面
2。增加返回的响应uuid
3。Spring Cloud Sleuth 网址：https://www.cnblogs.com/xingzc/p/9413860.html

问题：
1.close_wait
连接池问题
2.time_wait
3.死锁问题
4。线程满了（mysql设置连接和程序蛇追连接）
    修改连接数
如何尽量处理TIMEWAIT过多?
https://www.cnblogs.com/dadonggg/p/8778318.html
解决办法：
        改vi /etc/sysctl.conf 这个配置文件
    加
        net.ipv4.tcp_tw_reuse = 1
        net.ipv4.tcp_tw_recycle = 1
    然后执行/sbin/sysctl -p让参数生效。

Hystrix开启熔断器时并发请求数目设置
    feign:
     hystrix:
        enabled: true
报错了：20个线程压测的时候报错了；
java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@2e42d280 rejected from java.util.concurrent.ThreadPoolExecutor@68b6db84[Running, pool size = 10, active threads = 9, queued tasks = 0, completed tasks = 564444]
Hystrix默认的数量是10；
解决办法
hystrix:
    threadpool:
        default:
            coreSize: 200 ##并发执行的最大线程数，默认10
                maxQueueSize: 500 ##BlockingQueue的最大队列数

参考博客https://www.cnblogs.com/seifon/p/9921774.html
问题二：用户线程
jstack 92373 信息
https://www.cnblogs.com/zhuqq/p/5938187.html（参考）
线程占用cpu100%
第一步：ps -ef|grep java
第二步：top
第三步： top -Hp 92373 找到占用最高的线程
第四部：printf "%x\n" 107728  获得结果：1a4d0
第五步：jstack 107728 |grep 1a4d0    

jstat -gcutil 92373 1000 20
以上命令代码每过一秒打印一次gc情况，打印20次
S0：S0使用率；
S1：S1使用率；
E：Eden使用率；
O：老年代使用率；
P：PermGen的内存使用百分比；
M：MetaSpace的内存使用百分比；
YGC：Minor GC总共次数；
YGCT：Minor GC总共耗时，单位s;
FGC：Full GC总共次数；
FGCT：Full GC总共耗时，单位s;


jmap -dump:format=b,file=/home/app/sxpservice/logs/heap.hprof 92373


entityManager.getTransaction().commit();




问题一：mysql结点间数据同步问题
    例子：同一业务处理过程，middle-trade中代码写入一行记录， middle-user读取可能会存在读取不到的情形
    方法：将mysql配置修改为只使用一个结点， 后期可配置一个新的读数据源， 将一些耗时的非实时的查询， 例如一些分页查询在另外一个结点处理。
问题二：middle-* 原数据库最大数据库连接50，当请求较多时，出现wait-close问题
    方法：
        已将其调至200， 并将数据库最大连接设置为2000。
问题三：synchronized关键字的不合理使用， 导致大量线程blocking
    方法：已调整相关业务逻辑，最大可能降低锁粒度
问题四：hystrix 核心线程数太少，易造成RejectedExecutionException异常
    解决方法：调整为200;
问题五：所有的业务处理都是同步的
    建议：期可以考虑将部分业务改为异步例如记账相关操作， 尤其是石油公司预存金额扣除。
问题六：redis序列问题， 分段申请序列的情形， 因为对concurrentHash当前值的处理非原子操作，导致出现序列重复的情形
    方法：通过分段申请方法加锁，解决问题。
问题七：代码处理过程中无效动作太多， 例如同一个查询反复出现多次， 上下文中已知的信息再次通过数据查询获取等
    方法：建议优化代码
问题八：业务逻辑拆分过细，定位问题比较麻烦
    方法：TRACE_ID帮助定位问题，增加服务追踪框架。






问题一：事务没有提交
    主从库的问题导致，插入之后，没有查询出来。
        流程：
            1。调用交易接口记录消费记录；==微服务 
            2。调用记账接口记账成功
            3。调用交易接口变更消费状态；这个时候查询为空； 不是一个事务
        猜测：
            事务没提交
        证明：
            改了代码，手动刷新，后面还是没用
            DBA在性能测试群里面发了一张图：
                读的QPS性能
                写的TPS性能
            发现进行了读写分离
        发现
        配置文件中配置了一个
            com.mysql.jdbc.ReplicationDriver
        验证
            驱动成功
问题二：netty把cpu占满问题
升级spring-boot的版本

问题三：调用超时，以及连接数过多（默认是10，导致其他的进不了，熔断了）
    1。最大并发数20，因为后台有两台服务器
        解决办法
            hystrix:
                threadpool:
                    default:
                        coreSize: 200 ##并发执行的最大线程数，默认10
                        maxQueueSize: 500 ##BlockingQueue的最大队列数
                        queueSizeRejectionThreshold: 400 ##即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝，默认值5

    2。调用时间延长：
        ribbon.ReadTimeout=60000
        ribbon.ConnectTimeout=60000
        ribbon.MaxAutoRetries=0
        ribbon.MaxAutoRetriesNextServer=1 
        微服务间调用其实走的是http请求，sql执行时间比较短，设置sql的时间60000秒时间；

    3。数据库连接上不去
        调整了数据库连接池数量
            从100调到了200

问题四：账户用了select for update导致锁超时
    账户服务都在阻塞状态
    方法是把for update去掉，然后在代码用的update 更新余额的方法来弄的




问题一：
服务治理：调用超时，以及连接数过多
问题二：
sql超时的问题
问题三：
事务没有提交的问题
现象：
往消费记录里面插入数据；



