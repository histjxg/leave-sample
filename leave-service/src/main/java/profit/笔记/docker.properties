Commands attach Attach to a running container # 当前 shell 下 attach 连接指定运行镜像

build Build an image from a Dockerfile # 通过 Dockerfile 定制镜像

commit Create a new image from a container's changes # 提交当前容器为新的镜像

cp Copy files/folders from the containers filesystem to the host path # 从容器中拷贝指定文件或者目录到宿主机中

create Create a new container # 创建一个新的容器，同 run，但不启动容器

diff Inspect changes on a container's filesystem # 查看 docker 容器变化

events Get real time events from the server # 从 docker 服务获取容器实时事件

exec Run a command in an existing container # 在已存在的容器上运行命令

export Stream the contents of a container as a tar archive # 导出容器的内容流作为一个 tar 归档文件[对应 import ]

history Show the history of an image # 展示一个镜像形成历史

images List images # 列出系统当前镜像

import Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应 export]

info Display system-wide information # 显示系统相关信息

inspect Return low-level information on a container # 查看容器详细信息

kill Kill a running container # kill 指定 docker 容器

load Load an image from a tar archive # 从一个 tar 包中加载一个镜像[对应 save]

login Register or Login to the docker registry server # 注册或者登陆一个 docker 源服务器

logout Log out from a Docker registry server # 从当前 Docker registry 退出

logs Fetch the logs of a container # 输出当前容器日志信息

port Lookup the public-facing port which is NAT-ed to PRIVATE_PORT # 查看映射端口对应的容器内部源端口

pause Pause all processes within a container # 暂停容器

ps List containers # 列出容器列表

pull Pull an image or a repository from the docker registry server # 从docker镜像源服务器拉取指定镜像或者库镜像

push Push an image or a repository to the docker registry server # 推送指定镜像或者库镜像至docker源服务器

restart Restart a running container # 重启运行的容器

rm Remove one or more containers # 移除一个或者多个容器

rmi Remove one or more images # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]

run Run a command in a new container # 创建一个新的容器并运行一个命令

save Save an image to a tar archive # 保存一个镜像为一个 tar 包[对应 load]

search Search for an image on the Docker Hub # 在 docker hub 中搜索镜像

start Start a stopped containers # 启动容器

stop Stop a running containers # 停止容器

tag Tag an image into a repository # 给源中镜像打标签

top Lookup the running processes of a container # 查看容器中运行的进程信息

unpause Unpause a paused container # 取消暂停容器

version Show the docker version information # 查看 docker 版本号

wait Block until a container stops, then print its exit code # 截取容器停止时的退出状态值

Run 'docker COMMAND --help' for more information on a command. # 运行“docker command--help”获取关于命令的更多信息。

docker ps -a 包括停止的容器
docker stop mycat 停止容器
docker start mycat 启动容器
docker rm mycat 移除容器


生成镜像的两种方式：
一种是iimage------>Dockerfile[推荐]--image过程
container commit---》看不到
ƒ


创建mysql容器
镜像--class
容器--对象实例
	docker pull mysql
	docker run -d --name my-mysql -p 3301:3306 -e MYSQL_ROOT_PASSWORD=jack123 --privileged mysql （运行容器）
	docker exec -it my-mysql  /bin/sh  进入容器
	mysql -u root -pjack123
	docker  exec -it my_second_mysql /bin/sh
	mysql -u root -p123456

	mysql -h 127.0.0.1 -P 3306 -u root -p。这个命令是可以的(宿主机上登陆)
	grant all PRIVILEGES on *.* to root@'%' WITH GRANT OPTION;  为远程分配权限

dockerfile：镜像文件是通过docker build -t my-image .myfile;
myfile:当前目录下，并且再github上可以找到类似的文件
https://github.com/docker-library/mysql/blob/master/5.6/Dockerfile
构建自己的镜像：
Dockerfile语法：

查看启动日志：docker logs user01（容器）


我的第一个自做的docker镜像文件
/Users/huangxiaogen/docker/myFirstImage下的DockerFile 内容
FROM alpine:latest
MAINTAINER sbb
CMD echo "hello world"

有个概念：image就是通过DockerFile来的

该目录下运行：docker build -t hello-world .   生成镜像文件
创建容器对象：docker run hello-world
查看当前镜像： docker images
删除一个或多个镜像：docker rmi

查看容器对象例子：
/Users/huangxiaogen/docker/mycat
创建mycat镜像
获取压缩包
wget http://dl.mycat.io/1.6.7.3/20190927161129/Mycat-server-1.6.7.3-release-20190927161129-linux.tar.gz
创建文件
touch Dockerfile
vi  Dockerfile
FROM openjdk:8
ADD mycat.tar.gz /usr/local/
VOLUME /usr/local/mycat/conf
ENV MYCAT_HOME=/usr/local/mycat
EXPOSE 8066 9066
CMD ["/usr/local/mycat/bin/mycat", "console","&"]

创建镜像文件
docker build -t mycat:1.6 .
运行，并生成容器
docker run -it --name mycat-server -p 8066:8066 -p 9066:9066 mycat:1.6
进入linux内核
docker exec -it mycat-server  /bin/sh
进入该目录
/usr/local/mycat/conf
修改配置文件
docker镜像文件下没有vi命令
在使用docker容器时，有可能没有安装Vi,
 1。安装Vi:apt-get install vim,如果提示：Unable to locate package vim,
 2。 则需要敲：apt-get update,
 3。等更新完毕以后再敲命令： apt-get install vim
https://blog.csdn.net/qq_41218849/article/details/82821459 （这篇文章解决）
/bin/bash: xmllint: command not found错误导致编译不过,sudo apt-get  install libxml2-utils
格式化xml文件：
xmllint --format schema.xml

查看启动日志记录：
docker logs mycat-server
从宿主机复制到文件中
 docker cp /Users/huangxiaogen/Downloads/课堂源码/mycat/conf/rang-long-cust.txt mycat-server:/usr/local/mycat/conf/


 docker cp mycat-server:/usr/local/mycat/conf/.txt /Users/huangxiaogen/Downloads/
启动报错的时候
 查看mycat的日志：
tail -f /usr/local/mycat/logs/mycat.log

//删除所有的容器
docker rm -f $(docker ps -aq)
docker images # 显示当前系统镜像，不包括过渡层镜像
docker images -a # 显示当前系统所有镜像，包括过渡层镜像
docker images ubuntu # 显示当前系统

docker run -d -it --name my-centos centos
docker exec -it my-centos bash
提交当前的容器为新的镜像
docker commit my-centos vim-centos-image

查看资源
docker top 容器名称
docker stats container（这个更加的专业）

weavescope：监控docker镜像容器的工具

查看资源信息


redis mq，mysql----》应用进行通信，【分布式/微服务】---》IP地址，iptables，网络，
计算机网络--》linux网卡--》docker网络---》驾驭docker网络

container ---》destroy持久化， 数据---》保存

docker compose的内容，swarm的内容
查看网卡：
docker exec -it tomcat1 ip a
docker网络
docker network ls
检查网络
docker network inspect bridge
创建bridge的网络，不仅能解决ip的问题，还能解决域名访问的问题
docker network create tomcat-net
根据自定义的网络创建tomcat
docker run -d --name custom-net-tomcat --network tomcat-net tomcat  搭建集群
把容器加入到某个某个网络中
docker network connect tomcat-net tomcat1
增加一个dns记录，可以通过域名ping通  link很少用；一般自定义网络，就可以通过域名访问
 docker run -d --name tomcat01 --link tomcat02 tomcat
 docker exec -it tomcat01 ping tomcat02
 --这样去创建
  docker run -d --name mysql01 --network mysql
  docker run -d --name mysql02 --network mysql
  docker run -d --name mysql03 --network mysql
 docker run -d --name my-tomcat-host --network host tomcat
  docker run -d --name my-tomcat-none --network none tomcat
network namespace桥接模式：veth-pair技术
多机网络通信的问题，底层的一个实现技术，overlay -----》vxlan
bridge host null docker 多机网络通信  overlan

 docker run -d --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 mysql
docker stop $(docker ps -aq)停止所有的容器

$ curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

$ chmod +x /usr/local/bin/docker-compose

$ cp /usr/local/bin/docker-compose /usr/bin/docker-compose

docker容器保存数据的位置
volume：可以在DockerFile文件中找到，关键词是Volume关键字可以找到
docker volume ls：查看容器的存储位置
将volume删除  docker volume rm -f $(docker volume ls);
查看宿主机对应存储的的位置
docker volume inspect 0e0a225c39c8614914e6439f12ab9212e3c21e7ff4d17b06b29338ba29ee8427
--映射宿主机的名字：mysql03_volume
docker run -d --name mysql03 -v mysql03_volume:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql
容器删完了，但是宿主机对应的volume并没有丢（流程）
在容器中增加文件，查看宿主机中有没有增加：
    docker run -d --name mysql03 -v mysql03_volume:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql
    docker exec -it mysql03 bash
    cd /var/lib/mysql/
    touch yihangqinglu
    ls  （有yihangqinglu这个文件）
    exit
    docker volume ls
    docker inspect mysql03_volume （获取到mysql03对应的宿主机的实际位置）
    cd /var/lib/docker/volumes/mysql03_volume/_data
    ls（也有yihangqinglu这个文件）
//演示一个容器的数据怎么恢复 -v代表的是volume
    docker exec -it mysql03 bash；
    mysql -uroot -p123456
    create database db_test;
    exit
    exit
    docker rm -f mysql03
    docker volume ls
    docker run -d --name test-mysql -v mysql03_volume:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql
    docker exec -it test-mysql bash
    mysql -uroot -p123456
    show databases;
    docker run -d 宿主记得任意目录：容器的任意目录 --对应起来
//演示在tomcat容器中部署项目，宿主机中更改代码，自动同步
    docker run -d --name tomcat01 -p 9090:8080 -v /tmp/gpmall:/usr/local/tomcat/webapps/gpmall tomcat
    访问这个：
    http://49.235.7.227:9090/gpmall/1.html

    Percona XtraDB集群是一个完全开源的MySQL高可用性解决方案：https://blog.csdn.net/poxiaonie/article/details/78626411
    docker pull percona/percona-xtradb-cluster:5.7.21
    docker tag percona/percona-xtradb-cluster:5.7.21 pxc 打一个tag（）
    docker images
    集群搭建
    1⃣网络怎么操作：pxc-net 172.18.0.0/24
    2。持久化存储怎么弄 v1-mysql01 v2-mysql02 v3-mysql03
    3。容器该如何创建 3301:3306 -v v1:/var/lib/mysql -e

创建一个单独的网段，给mysql数据库集群使用
    docker network create --subnet=172.19.0.0/24 pxc-net
    docker network inspect pxc-net
    创建volume
    docker volume create --name v1
    docker volume create --name v2
    docker volume create --name v3
    docker volume ls
    docker volume inspect v1  查看详情
    06 创建单个PXC容器demo
        docker run -d -p 3301:3306 -v v1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=123456 --privileged --name=node1 --net=pxc-net --ip 172.20.0.2 pxc
        docker run -d -p 3302:3306 -v v2:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=123456 -e CLUSTER_JOIN=node1 --privileged --name=node2 --net=pxc-net --ip 172.20.0.3 pxc
        docker run -d -p 3303:3306 -v v3:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=123456 -e CLUSTER_JOIN=node1 --privileged --name=node3 --net=pxc-net --ip 172.20.0.4 pxc
    数据库的负载均衡
    docker pull haproxy
    touch /tmp/haproxy/haproxy.cfg
    docker run -it -d -p 8888:8888 -p 3306:3306 -v /tmp/haproxy:/usr/local/etc/haproxy --name haproxy01 --privileged --net=pxc-net haproxy
    http://49.235.7.227:8888/dbs_monitor
    账户：admin 密码：admin 
    进入容器中启动
    docker exec -it haproxy01 bash 启动haproxy.cfg
    haproxy -f /usr/local/etc/haproxy/haproxy.cfg 
    docker inspect haproxy01 
    在mysql需要创建一个心跳：
    CREATE USER 'haproxy'@'%' IDENTIFIED BY '';
Nginx+Spring Boot项目+MySQL
    本地项目起来，访问http://localhost:8080/user/listone?username=%E9%BB%84%E5%B0%8F%E6%A0%B9
    是可以通的
    第一步：先将项目生成image
    docker network create --subnet=172.19.0.0/24 pro-net
    mkdir springboot-mybatis
    cd springboot-mybatis/
    rz   上传打包好的文件
    上传之后，构建项目的镜像文件
    在该项目下：vi Dockerfile
    并将下面内容复制进去
    MAINTAINER itcrazy2016
    LABEL name="springboot-mybatis" version="1.0" author="itcrazy2016" 
    COPY springboot-mybatis-0.0.1-SNAPSHOT.jar springboot-mybatis.jar 
    CMD ["java","-jar","springboot-mybatis.jar"]
    执行命令： docker build -t sbm-image .
    docker images 查看是否镜像创建成功
    docker volume create v11
    创建mysql容器
    docker run -d --name my-mysql -v v11:/var/lib/mysql -p 3311:3306 -e MYSQL_ROOT_PASSWORD=123456 --net=pro-net --ip 172.19.0.6 mysql
    查看网络情况
    docker network inspect pro-net
通过项目的镜像文件生成容器
docker run -d --name sb01 -p 8081:8080 --net=pro-net --ip 172.19.0.11 sbm-image  
docker run -d --name sb02 -p 8082:8080 --net=pro-net --ip 172.19.0.12 sbm-image 
docker run -d --name sb03 -p 8083:8080 --net=pro-net --ip 172.19.0.13 sbm-image 
期间打出了点问题：
通过mvn clean package
注意：不要在测试包里面写测试类
直接访问腾讯云地址：http://49.235.7.227:8081/user/listall

接下来创建nginx：
cd /tmp/nginx
vi nginx.conf
user nginx;
worker_processes  1;
events {
worker_connections  1024;
}
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server {
        listen 80;
        location / {
            proxy_pass http://balance;
                    }
  }
    upstream balance{
    server 172.19.0.11:8080;
    server 172.19.0.12:8080;
    server 172.19.0.13:8080;
    }
    include /etc/nginx/conf.d/*.conf;
}
docker run -d --name my-nginx -p 80:80 -v /tmp/nginx/nginx.conf:/etc/nginx/nginx.conf --network=pro-net --ip 172.19.0.10 nginx
curl 49.235.7.227/user/listall 返回数据；
docker run -d --name user01 -p 8088:8080 sbm-image 不在同一个网娜，不允许通过域名访问
curl 49.235.7.227:8088/user/listall
docker run -d --name user02 -p 8089:8080 --net=pro-net --ip 172.19.0.22  sbm-image
curl 49.235.7.227:8089/user/listall
在同一个网络，bridge pro-net 容器之间不仅可以通过ip访问，而且可以通过名称访问
获取容器的真正的进程id
docker inspect --format '{{ .State.Pid }}' 47ea774466b7
查看宿主机的 proc 文件，看到这个 3925 进程的所有 Namespace 对应的 文件:
ls -l  /proc/3925/ns
ls -l /proc/7328/ns/net
ls -l /proc/28905/ns/net