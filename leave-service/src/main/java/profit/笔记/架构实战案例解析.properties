参考链接：
    processon.com/view/link/5e51378ce4b0c037b5f9d1e3
1.架构的出发点 ：
    业务和技术在不断复杂化，引起系统混乱，需要通过架构来保证有序
2.架构实现
    从无序到有序，是通过合理的内部编排实现的，基本的手段，就是“分”与“合”，先把系统打散，然后将它们重新组合，形成更合理的关系
    分：
        就是把系统拆分为各个子系统、模块、组件
        例子：
            Builder 模式负责粗粒度的组装逻辑，它承担的是合的部分
    合：
        基于业务流程和技术手段，把各个组件有机整合在一起
        例子：
            负责细粒度的构造逻辑，承担的是分的部分，大家各自管理自己的复杂性
3.系统的落地过程：
    系统首先由人来开发，然后由机器来运行，人和机器共同参与一个系统的落地。
    开发的痛点：
        主要由业务架构和应用架构来解决
    机器的痛点：
        主要由技术架构来解决。
    业务架构--》概念层面
    应用架构--》逻辑层面
    技术架构--》物理层面
4。产品经理的职责：
    告诉用户，系统长什么样子；告诉开发，他要实现什么功能。
    输入：收集用户的原始需求
    输出：梳理成一个个业务流程
    业务功能：每个业务流程由多个业务步骤组成
5。业务架构师的职责
    就是把业务流程和节点打散，按照业务域的维度来划分系统模块。
    并定义这些模块之间的关系，最终形成一个高度结构化的模块体系
    产品经理和业务架构师的区别：
        产品经理：定义了系统的外观，满足了用户
        业务架构师：在此基础上，进一步定义了系统的内部模块结构，满足了开发人员。
6。业务的可扩展
    业务的主题：变化和创新
    系统的主题：稳定和可靠
    解决方法：
        业务平台和业务线剥离开；
            业务平台：封装基础通用的功能，这样，它就变得相当地稳定
            业务线：；让各个业务线包含自己的个性化需求，业务线只依赖业务平台，业务线彼此之间互相独立，可以自由变化
7。业务的可复用
    首先：
        模块的职责定位要非常清晰
    其次：
        模块的数据模型和接口设计要保证通用
    最后：
        实现模块的高复用，还需要做好业务的层次划分
8。系统的构成：
    系统 = 模块 + 关系。
    模块：泛指子系统、应用、服务或功能模块
        模块内部：由数据和业务逻辑组成
            其中数据是核心，业务逻辑围绕着数据，对数据做进一步加工，方便外部使用。
    要求：
        1。定位明确，概念完整
        2。自成体系，粒度适中
    关系：模块之间的依赖关系
    依赖关系：尽量划分为不同的层次，，层与层之间的依赖关系都是层与层之间自上而下的依赖，相对于多对多的
        网状依赖，层次依赖的方向更清晰
9。扩展性的本质
    通过拆分，实现模块划分
        水平拆分：
            解释
                指从上到下把系统分为多层，按照系统处理的先后顺序，把业务拆分为几个步骤
            例子：
                前后端分离
        垂直拆分：
            解释：
                按照不同的业务线拆分
            例子：
                将整个出行业务分为出租车业务、快车业务和顺风车业务，
                按照不同的业务场景，自上而下进行竖切，让每个业务都自成体系，形成自己的业务闭环。
        拆分步骤：
            一般做业务架构时，我们先考虑垂直拆分，从大方向上，把不同业务给区分清楚
            然后再针对具体业务，按照业务处理流程进行水平拆分
    通过整合，优化模块依赖关系
        通用化整合：
            含义：
                通用化指的是通过抽象设计，让一个模块具备通用的能力，能够替代多个类似功能的模块
            作用
                通过模块通用化，模块的数量减少了，模块的定位更清晰，概念更完整，职责更聚焦
        平台化整合：
            平台化是把定位相同的模块组织在一起，以组团的方式对外提供服务
            对于外部系统来说，我们可以把这些模块看成是一个整体，一起对业务场景提供全面的支撑

10.电商平台架构是如何演变的？
    单体架构---》分布式架构---》SOA架构---》微服务架构---》中台架构
        单体架构：
            概念：
                只有一个应用，所有代码跑在一个进程，所有的表放在一个 DB 里
            水平方向：
                通过层次化的划分，降低了业务的深度复杂性
                    业务的深度：业务流程从开始到结束的长度
            垂直方向：
                缺乏清晰的边界，上下层模块之间是多对多的网状依赖关系
        分布式架构：
            概念：
                系统由多个独立的应用组成，它们互相协作，成为一个整体。
            应用场景：
                分布式架构适用于业务相关性低、耦合少的业务系统

        SOA 架构
            传统的 SOA 架构：
                解决的是企业内部大量异构系统集成的问题
            新的SOA架构：
                解决的是系统重复建设的问题
            好处：
                首先：
                    通过服务化思想，提供更好的业务封装性，并通过标准技术，能更友好地对外输出业务能力
                其次：
                    SOA 服务不依附于某个具体应用，它可以独立地部署和扩展，这样避免了直接影响现有的系统
                最后：
                    服务通过封装通用的业务逻辑，可以供所有应用共享，解决了重复造轮子的问题

        微服务架构
            微服务是去中心化的，不需要 SOA 架构中 ESB 的集中管理方式。
            微服务 = 小应用 + 小服务
            例子：
                共享微服务：封装底层基础业务
                聚合微服务：封装流程
                应用微服务：封装具体业务场景的服务端
                系统微服务：封装基础中间件（如 Redis 缓存、消息推送）
11.服务通过封装通用的业务逻辑，可以供所有应用共享，解决了重复造轮子的问题。




