01 | 使用了并发工具类库，线程安全就高枕无忧了吗?
ThreadLocal
    案例：
        使用了 ThreadLocal 来缓存获取到的用户信息。
        现象：
            有的时候获取到是别人的信息；
        原因：
            1。程序运行在 Tomcat 中，执行程序的线程是 Tomcat 的工作线程，而 Tomcat 的工作线程是基于 线程池的。
            2。线程池会重用固定的几个线程，一旦线程重用，那么很可能首次从 ThreadLocal 获取的值是之前其他用户的请求遗留的值。
            3。ThreadLocal 中的用户信息就是其他用户的信息。
        实现方式：
            设置tomcate的最大线程数是：server.tomcat.max-threads=1
        解决办法：
            使用类似 ThreadLocal 工具来存放一些数据时，需要特别注意在 代码运行完后，显式地去清空设置的数据
        注意：
            代码中使用了自定义的线程池，也同样会遇到这个问题。
ConcurrentHashMap：
    是一个高性能的线程安全的哈希表容器。只能保证提供的原子 性读写操作是线程安全的。