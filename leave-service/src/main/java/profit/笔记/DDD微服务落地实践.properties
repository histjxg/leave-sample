01 DDD ：杜绝软件退化的利器
        1。微服务：强调“小而专、高内聚”，否则就不能发挥出微服务的优势，甚至可能令问题更糟糕。
    软件退化的根源：
        注意：
            1。软件设计质量最高的时候是第一次设计的那个版本，当第一个版本设计上线以后就开始各种需求变更，这常常又会打乱原有的设计
        问题：
            为什么软件会退化，会随着变更而设计质量下降呢？
            线索：
                软件要做成什么样，既不由我们来决定，也不由用户来决定，而是由客观世界决定
            过程：
                1。在我们不断地修复 Bug，实现新需求的过程中，软件的业务逻辑也会越来越接近真实世界，使得我们的软件越来越专业，让用户感觉越来越好用。
                2。但是，在软件越来越接近真实世界的过程中，业务逻辑就会变得越来越复杂，软件规模也越来越庞大。
            认识：
                简单软件有简单软件的设计，复杂软件有复杂软件的设计。
            原因：
                如果在每次软件变更时没有调整程序结构，而是在原有的程序结构上不断地塞代码，软件就会退化
    杜绝软件退化：两顶帽子
        两顶帽子：
            1。在不添加新功能的前提下，重构代码，调整原有程序结构，以适应新功能
            2。实现新的功能。
    保证代码不退化的关键：
        1。在于每次需求变更的设计，只有保证每次需求变更时做出正确的设计
        2。才能保证软件以一种良性循环的方式不断维护下去。
    保持软件质量：领域驱动
        如何将真实世界与软件世界对应起来呢？
            1。真实世界有什么事物，软件世界就有什么对象
            2。真实世界中这些事物都有哪些行为，软件世界中这些对象就有哪些方法；
            3。真实世界中这些事物间都有哪些关系，软件世界中这些对象间就有什么关联
        过程：
            1。领域驱动设计中，就将以上三个对应，先做成一个领域模型，然后通过这个领域模型指导程序设计；
            2。在每次需求变更时，先将需求还原到领域模型中分析
            3。根据领域模型背后的真实世界进行变更，然后根据领域模型的变更指导软件的变更，设计质量就可以得到提高。

02 以电商支付功能为例演练 DDD
案例：
    在用户下单以后，经过下单流程进入付款功能；
    通过用户档案获得用户名称、地址等信息；
    记录商品及其数量，并汇总付款金额；
    保存订单；
    通过远程调用支付接口进行支付。
正常开发流程：
    开发人员往往草草设计以后就开始编码，设计质量也就不高。
领域驱动开发流程：
    在拿到新需求以后，应当先进行需求分析，设计领域模型
分析：
    1。该场景中有“订单”，每个订单都对应一个用户；
    2。一个用户可以有多个用户地址，但每个订单只能有一个用户地址；
    3。此外，一个订单对应多个订单明细，每个订单明细对应一个商品，每个商品对应一个供应商
现象：
