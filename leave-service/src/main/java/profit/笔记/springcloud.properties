01。分布式微服务架构技术点：
    1。服务注册与发现
    2。服务调用
    3。服务熔断
    4。负载均衡
    5。服务降级
    6。服务消息队列
    7。配置中心管理
    8。服务网关
    9。服务监控
    10。全链路追踪
    11自动化构建部署
    12。服务定时任务调度操作
02。springboot和springcloud的选型搭配
    参考网址：
        https://spring.io/projects/spring-cloud#overview
        的目录Table 1. Release train Spring Boot compatibility
    项目版本：
    cloud：Hoxton.SR1
    boot 2.2.2.RELEASE
        问题：
            为什么选择boot 2.2.2.RELEASE
        答案：
            参考：
                https://cloud.spring.io/spring-cloud-static/Hoxton.SR2/reference/html/spring-cloud.html
    cloud alibaba 2.1.0.RELEASE
    JAVA java8
    Maven 3.5以上
    mysql 5.7及以上
03关于Cloud各种组件的停更/升级/替换
    停更不停用：
        1。被动修复bugs
        2。不再接受合并请求
        3。不再发布新版本
    cloud升级：
    1。服务注册中心
        1。Eureka(停止更新)
        2。Zookeeper
        3。Consul
        4。Nacos(阿里，推荐，百万）
    2。服务调用(消费者)
        1。Ribbon
        2。LoadBalancer
    3。服务调用(服务者)
        1。feign
        2。Openfeign
    4。服务降级
        1。Hystrix(不推荐)
        2。resilience4j
        3。Alibaba sentinel(推荐)
    5。服务网关
        1。Zuul(不推荐)
        2。Zuul2
        3。gateway(推荐)
    6。服务配置：
        1。config（不推荐）
        2。Nacos
        3。携程的apollo
    7。服务总线：
        1。Bus
        2。Nacos（推荐)
04微服务的架构编码的构建
    dependencyManagement
        Maven使用dependencyManagement元素提供了一种管理以来版本号的方式
             通常会在一个组织或者项目的最顶层父POM中看到dependencyManagement元素
        特点：
            能让所有的子项目中引用的一个依赖而不用显示的列出版本号
    微服务模块的建立：
        1。建module
        2。改pom
        3。写YML（复制）
        4。主启动
        5。业务类
            1。建表sql
            2。entities
                1。主实体Payment
                2。Json封装体CommonResult
            3。dao
                1。接口PaymentDao(注解mapper或者@Repository)
                2。mybatis的映射文件PaymentMapper.xml
            4。service
                1.接口PaymentService
                2.实现类
            5。controller
        6。测试
            postman工具使用
    热部署devtools
        1。Adding devtools to your project
        2。Adding plugin to your pom.xml
        3。Enabling automatic build
        4。UPdate the value of
        5。重启idea
        参考文章：
            https://www.cnblogs.com/MrSi/p/9540730.html
    微服务消费者订单Module模块
        1。建cloud-consumer-order80
        2。改POM
        3。写YML
        4。主启动
        5。业务类
            引入RestTemlate
        6。测试
            注意，不要忘记加入@RequestBody
        注意：(多服务的时候哟哦那个Dashboard)
            IDEA中设置Run Dashboard
            参考：
                https://blog.csdn.net/chinoukin/article/details/80577890
    工程重构：
        1。观察问题：系统又重复部分
        2。新建 cloud-components
        3。POM
        4。entities
        5。maven 命令clean install
        6。订单80和制服8001分别改造

05Eureka的服务注册与发现：
    1。Eureka的基础知识
        1。什么是服务治理
        2。什么是服务注册
        3。Eureka两个组件
            1。Eureka Server
            2。Eureka Client
    2。单机Eureka的构建步骤
        1。Eureka Server
                1。idea生成EurekaServer端服务注册中心类似物业公司
                2。EurekaClient端cloud-provider-payment8001
                    将注册进EurekaServer成为服务提供者provider，类似尚硅谷学校对外提供授课服务
                3。EurekaClient端cloud-consumer-order80
                    将注册进EurekaServer成为服务消费者consumer，类似尚硅谷上课消费的各位同学
                4。bug
            流程：
                1。建Eureka Server项目
                2。改POM
                3。写YML
                4。主启动 @EnableEurekaServer
                5。业务类
        2。Eureka Client
            流程：
                1。建Eureka Client项目
                2。改POM
                3。写YML
                4。主启动 @EnableEurekaClient
                5。业务类
    3。集群Eureka的构建步骤
        1。互相注册：
        2。修改host文件
    4。actuator微服务的信息完整
        instance:
            preferIpAddress: true 注册中心显示ip
        localhost：8001/actuator/health 查看健康状态链接
    5。服务发现Discovery
        参考：
            DiscoveryClient
            https://blog.csdn.net/zhangminemail/article/details/84836488
    6。Eureka自我保护
        1。故障现象
        2。导致原因
        3。怎么禁止自我保护
        参考：
            https://www.jianshu.com/p/cb7fa0aa47a8
        默认是开启的
06。Zookeeper服务注册与发现
    1。Eureka停止更新了你怎么办
        参考：
            https://github.com/Netflix/eureka/wiki
    2。SpringCloud整合Zookeeper代替Eureka
        1。注册中心Zookeeper
        2。服务提供者
            1。建Eureka Server项目
            2。改POM
            3。写YML
            4。主启动 @EnableDiscoveryClient
            5。controller
            6。启动8004注册进zookeeper
                下载安装：
                    https://www.cnblogs.com/hejj-bk/p/11587640.html
                安装报错：
                    https://www.jianshu.com/p/5cd618ad381e

                    参考：
                        https://blog.csdn.net/qq_40770950/article/details/94734408
                    启动后出问题：
                        连接Zookeeper报错，
                        原因：
                            服务器上zookeeper的版本与引用的jar包版本不一致，导致服务启动不起来
                        思路：
                            解决Zookeeper版本jar包冲突问题
                        方法：
                            排除springcloud自带的jar
            7。验证测试
            8。验证测试2
            9。思考
                服务节点是临时还是永久呢？
            答案：
                临时的(有就是有，没有就是没有)，AP和CP的区别
            AP：
                概念：
                    那个失去联系的节点依然可以向系统提供服务，不过它的数据就不能保证是同步的了（失去了C属性）
                例子：
                    Eureka
            CP：
                概念：
                    1。为了保证数据库的一致性，我们必须等待失去联系的节点恢复过来，
                    2。在这个过程中，那个节点是不允许对外提供服务的，这时候系统处于不可用状态(失去了A属性)。
                例子：
                    Zookeeper
            参考网站：
                https://blog.csdn.net/u013058742/article/details/83541905

        3。服务消费者
           跟提供者一样的流程
07。Consul服务注册与发现
    1。consul简介：
        1。是什么
            https://www.consul.io/intro/index.html
        2。能干嘛
            1。服务发现：提供http和DNS两种发现方式
            2。健康监测：支持多种方式，http，TCP，Docker，Shell脚本制定化
            3。KV存储：Key，Value的存储方式
            4。多数据中心：Consul支持多数据中心
            5。可视化Web界面：
        3。去哪下
        4。怎么玩
            参考：
                https://www.springcloud.cc/spring-cloud-consul.html
    2。安装并运行Consul
        1。官网安装说明
        2。下载完成后只有一个Consul.exew文件，硬盘路径下双击运行，查看版本号信息
        3。使用开发模式启动
            1。consul agent -dev
            2。通过以下地址可以访问Consul的
            3。结果页面
        参考：
            https://www.cnblogs.com/xiaoyaodijun/p/9797174.html 
    3。服务提供者
        1。新建module制服模块provider8006
        2。pom
        3。YML
        4。主启动类 使用注解EnableDiscoveryClient
        5。业务类Controller
        6。验证测试
        参考：
            https://www.cnblogs.com/toov5/p/9952743.html
    4。服务消费者
          跟服务提供者一样的思路
    5。三个注册中心异同点
        参考：
            https://blog.csdn.net/fly910905/article/details/100023415
        CAP：
            C：Consitency 强一致性
            A：Availability 可用性
            P：Partition tolerance 分区容错性
            CAP：理论关注力度是数据，而不是整体系统设计的策略
        经典CAP图：
        AP：Eureka
            当网络分区后，为了保证可用性，系统B可以返回旧值，保证系统的可用性
            结论：
                违背了一致性C的要求，只满足可用性和分区容错，即AP
        CP：(Zookeeper/Consul)
        保证数据靠谱，能用就用，不能用就不用
08。Ribbon负载均衡服务调用
    1。概述
        1。是什么：提供客户端软件负载均衡算法和服务调用
        2。官网资料
            参考：
                https://github.com/Netflix/ribbon
                Ribbon目前进入维护模式
        3。能干嘛
            1。负载均衡
                1。进程内(Ribbon本地的服务端的 )
                        概念：
                            将LB消费方集成到消费方,消费方从服务中心获知有哪些地址可以用,然后再从这些地址中获取合适的地址
                        Ribbon：（是一个类库，属于消费方）
                            本地负载均衡，在调用微服务接口的时候，会在注册中心获取注册信息服务列表之后缓存到JVM本地，从而本地实现RPC远
                            程服务调用技术
                2。集中式(nginx代理)
                    概念：
                        1。即在服务的消费方和提供方之间使用独立的LB设施，
                        2。由设施负责把访问请求通过某种策略转发至服务的提供方
                    例子：
                        F5，nginx

                    Nginx：
                        是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求，即负载均衡是服务端实现的
            2。前面我们讲了80通过轮询负载访问8001/8002
            3。一句话
                负载均衡+RestTemplate调用
    2。Ribbon负载均衡演示
        1。架构说明
            总结：
                Ribbon其实就是一个软负载均衡的客户组件，
                他可以和其他所需请求的客户端结合使用，和Eureka结合只是其中的一个实例
        2。POM
        3。二说RestTemplate的使用
            参考：
                https://docs.spring.io/spring/docs/5.2.4.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html
            1。官网
            2。getForObject方法/getForEntity方法
            3。postForObject/postForEntity
            4。get请求方法
            5。POST请求方法
    3。Ribbon核心组件IRule
        1。IRule：根据特定算法中从服务列表中选举要访问的服务
            参考：
                https://blog.csdn.net/weixin_34218890/article/details/86716219
        2。如何替换
            参考：(自定义Ribbon)
                https://cloud.spring.io/spring-cloud-netflix/1.4.x/multi/multi_spring-cloud-ribbon.html
            如何找到地址：
                第一步：
                    spring.io官网：
                第二步：
                    选择project标签下的springcloud
                第三步：
                    选择spring cloud Neffix
                第四步：
                    选择lean标签页下的API DOC
                第五步：
                    选择7。Client Side Load Balancer: Ribbon
                    下的自定义Ribbon
            流程：
                1。修改cloud-consumer-order80
                2。注意配置细节
                3。新建package
                4。上面包下新建MySelfRule规则类
                5。主启动类添加@RibbonClient
                6。测试

    4。Ribbon负载均衡算法
        1。原理
        2。源码
        3。手写
            参考：
                https://blog.csdn.net/shijiujiu33/article/details/94625302
        流程：
            1。ApplicationContextBean去掉注解@LoadBalanced
            2。LoadBalancer接口
            3。MyLB
            4。OrderController
            5。测试

09。OpenFeign服务接口调用
    1。概述
        1。OpenFeign是什么
            概念：
                Feign是一个声明式的Web服务客户端，让编写的Web服务端变得非常容易，只需创建一个接口并在接口上添加注解即可
        2。能干嘛
        3。Feign和OpenFeign两者区别
            参考：
                https://blog.csdn.net/zimou5581/article/details/89949852
    2。OpenFeign使用步骤(客户端使用)
        1。接口+注解 微服务调用接口+@FeignClient
        2。新建cloud-consumer-feign-order80
        3。POM
        4。YML
        5。主启动 加注解@EnableFeignClients
        6。业务类
            1。业务逻辑接口+@FeignClient配置调用provider服务
            2。新建PaymentFeignService接口并新增注解@FeignClient
            3。控制层Controller
        7。测试
            1。先启动2个Eureka集群7001/7002
            2。在启动2个微服务8001/8002
            3。启动OpenFeign启动
            4。http：//localhost/consumer/payment/get/31
            5。feign自带负载均衡配置项
        8。小总结

    3。OpenFeign的超时控制
        1。超时控制，故意演示出错情况
        2。OpenFeign默认等待1秒钟，超过后报错
        3。是什么 OpenFeign默认支持Ribbon
        4。YMl文件里需要开启OpenFeign客户端超时控制
            ribbon:
                ReadTimeout: 20000
                ConnectTimeout: 10000
                MaxAutoRetries: 0
                MaxAutoRetriesNextServer: 1
                OkToRetryOnAllOperations: true

    4。OpenFeign日志打印功能
        1。日志打印功能
        2。是什么
        3。日志级别
        4。配置日志bean
        5。YML文件里需要开启日志的Feign客户端
        6。后台日志查看
        参考：
            https://www.jianshu.com/p/de3f0266591a
10。Hystrix断路器
    1。概述
        1。分布式系统面临的问题
            1。调用超时
            2。服务雪崩
            3。调用失败
        2。是什么
            1。Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里
            2。许多依赖不可避免的调用失败，比如超时，异常等
            3。Hystrix能够保证在一个依赖出问题的情况下，不会整体导致服务失败，避免级联故障，以提高分布式系统的弹性
        3。能干嘛
            1。服务降级
            2。服务熔断
            3。接近实时的监控
            4。等等
        4。官网资料
            参考：
                https://github.com/Netflix/Hystrix/wiki/How-To-Use
        5。Hystrix官宣，停更进纬
            参考：
                https://github.com/Netflix/Hystrix
    2。Hystrix重要概念
        1。服务降级
            概念
                服务器忙，请稍后再试，不让客户端等待并立即返回一个友好提示，fallback
            那些情况会出现降级：
                1。程序运行异常
                2。超时
                3。服务熔断出发服务降级
                4。线程池/信号量打满也会导致服务降级
        2。服务熔断
            概念：
                1。类比保险丝，达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示
            例子：
             就是保险丝(服务降级-》进而熔断，--》恢复调用链路)
        3。服务限流
            概念：
                 高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序的进行
    3。hystrix案例
            1。构建
            1。新建cloud-provider-hystrix-payment8001
            2。POM
            3。YML
            4。主启动
            5。业务类：
                1。service
                2。controller
            6。正常测试
        2。高并发测试
            1。上述在非高并发情形下，还能勉强满足，but。。。。
            2。Jmeter压测测试
                1。用Jmeter，来20000个并发压死8001，200002个请求都去访问Paymentinfo_TimeOut服务
                2。再来一个访问
                3。看演示结果
                    1。两个都在自己转圈圈
                    2。为什么会被卡死
            3。Jmeter压测结论
            4。看热闹不嫌事大，80新建加入（客户端测试）
                1。新建
                2。POM
                3。YML
                4。主启动
                5。业务类
                6。正常测试
                7。高并发测试
                    1。2万个线程亚8001
                    2。消费端80服务再去访问正常的ok微服务8001地址
                    3。http://localhost/consumer/payment/hystrix/ok/32
                    4。消费者80
        3。故障现象和导致原因
            1。8001同一层次的其他接口服务被困死，因为tomcat线程池里面的工作线程已经被挤占完毕
            2。80此时调用8001，客户端访问相应缓慢，转圈圈
        4。上诉结论
            1。正因为有上述故障或不佳表现
            2。才有我们的降级/容错/限流等技术诞生
        5。如何解决？解决的要求
            1。超时导致服务器变慢， 方法：超时不再等待
            2。出错(宕机或程序运行出错)  出错要有兜底
            3。解决
                1。对方服务超时啦，调用者不能一直卡死等待，必须有服务降级
                2。对方服务down机啦，调用者不能一直卡死等待，必须有服务降级
                3。对方服务ok，调用者自己出故障或有自我要求(自己的等待时间小于服务提供者，自己处理降级）
        6。服务降级
            1。降级配置 @HystrixCommand
            2。8001先从自身找问题
            3。8001fallback(服务端)
                1。业务类启用 (@HystrixCommand报异常后如何处理)
                2。主启动类激活 （添加注解EnableCircuitBreaker）
            4。80fallback(客户端需要配置)
                feign:
                    hystrix:
                        enabled: true
                流程：
                    1。80订单微服务
                    2。题外话，切记，改属性重启下代码
                    3。YML
                    4。主启动 @EnableHystrix
                    5。业务类
            5。目前问题
                    1。每个业务方法对应一个兜底的方法，代码膨胀
                    2。统一和自定义的分开
            6。解决问题
                global fallback
                    1。每个方法都有一个，膨胀
                            1。feign接口系列
                            2。@DefaultPerties(defaultFallBack="")
                            3。controller配置
                        服务端代码
                            参考：https://www.jianshu.com/p/9a450a3ab793
                    2。业务和降级代码在一起
                        参考：@FeignClient(value = "member",fallback = MemberServiceFallback.class)
                            https://blog.csdn.net/zhangshengqiang168/article/details/104475586/
            参考：
                https://www.cnblogs.com/huangjuncong/p/9026949.html
            或者：
                https://www.jb51.net/article/158841.htm
            参考：
                https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.2.RELEASE/reference/html/#circuit-breaker-hystrix-clients
        7。服务熔断
            1。断路器
            2。熔断是什么
            3。实操
                1。修改cloud-provider-hystrix-payment8001
                2。paymentService
                3。PaymentController
                4。测试
                参考：
                    https://www.cnblogs.com/qdhxhz/p/9581440.html
                    错误率越高的化，就会熔断，好的服务也会访问不了，错误率不高的话慢慢的会恢复
            4。原理(小总结)
                1。大神结论
                2。熔断类型
                    1。熔断打开
                        概念：
                            请求不再进行调用当前服务，内部设置时钟一般为MTR(平均故障处理时间),当打开时长达到所设时钟则进入半熔断状态
                    2。熔断关闭
                        概念：
                            熔断关闭不会对服务进行熔断
                    3。熔断半开
                        概念：
                            部分请求根据规则调用当前服务，如果请求成功且符合规则认为当前服务恢复正常，关闭熔断
                3。官网断路器流程图
                    1。官网步骤
                    2。断路器什么情况下开始起作用
                    3。断路器开启或者关闭的条件
                        1。当满足一定阀值的时候(默认10秒内20个请求次数)
                        2。当失败率达到一定时候（默认10秒内50%的请求失败）
                        3。到达以上阀值，断路器将会开启
                        4。当开启的时候，所有的请求都不会进行转发
                        5。一段时间之后（默认是5秒）这个时候断路器是半开状态，会让其中一个请求进行转发，如果成功，断路器会关闭，若失败，继续开启，重复4和5
                    4。断路器打开之后
                    5。All配置


        8。服务限流
            后面高级篇讲解alibaba的Sentinel说明
    4。hystrix工作流程
        参考：
        https://github.com/Netflix/Hystrix/wiki/How-it-Works
    5。服务监控hystrixDashboard
        1。概述
        2。仪表盘9001
        3。断路器演示
            加个注解@EnableHystrixDashboard
        参考：
            https://www.cnblogs.com/carrychan/p/9529418.html

11。zuul路由网关（建议不要用）
    1。概述简介
    2。路由基本配置
    3。路由访问映射规则
    4。查看路由信息
    5。过滤器

12。gateway新一代网关
    1。概述简介
        1。官网
            1。上一代zuul1.x 参考：https://github.com/Netflix/zuul/wiki
            2。当前gateway
                参考：
                https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/
        2。是什么
            1。概述
            2。一句话：springcloud gateway 使用的webflux中的reactor-netty响应式编程组件，底层使用了netty框架
        3。能干嘛
            1。反向代理
            2。鉴权
            3。流量控制
            4。熔断
            5。日志监控
            6。。。。。
        4。微服务架构中的网关在哪里
            web请求-》nginx-网关-》微服务
        5。有zuul了怎么又出来了gateway
            1。我们为什么选择gateway
                1。neffix不靠谱，zuul2。0一直跳票，迟迟不发布
                2。springcloud gateway具有如下特性
                    1。基于springFramework5，project reactor和springboot2。0进行构建
                    2。动态路由：能够匹配任何请求属性
                    3。可以对路由指定Predicate（断言）和Filter过滤器
                    4。集成Hystrix断路器功能
                    5。集成Spring cloud服务发现功能
                    6。易于编写Predicate（断言）和Filter（过滤器）
                    7。请求限流功能
                    8。支持路径重写
                 3。springcloud与zuul的区别
            2。zuul1。X模型
            3。GateWay模型

    2。三大核心简介
        1。Route路由
        2。Predicte断言
        3。Filter过滤
        4。总体
        参考：
            https://www.cnblogs.com/crazymakercircle/p/11704077.html
    3。Gateway工作流程
    4。入门配置
        1。新建module
        2。POM
        3。YML
        4。业务类
        5。主启动类
        6。9527网关如何做路由映射那？？
        7。YML新增网关配置
        8。测试
        9。YML配置说明
            gateWay的配置方式
    5。通过微服务名实现动态路由
        1。默认情况下，Gateway会根据注册中心注册的服务列表，以注册中心上的微服务名为路径创景动态路由进行转发，从而实现动态路由的功能
        2。启动
        3。POM
        4。YML
        5。测试
    6。Predicate的使用
        1。是什么
        2。Route Predicate Factories这是什么东东
        3。常用的Route Predicate
        参考：https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/#gateway-request-predicates-factories
    7。Filter的使用
        1。是什么
        2。spring cloud Gateway的filter
            1。生命周期 only two
            2。种类：一种是gatewayFilter 一种是globalfilter
            参考：https://www.cnblogs.com/liukaifeng/p/10055862.html
        3。常用的gatewayFilter
        4。自定义过滤器
            1。两个主要接口介绍
            2。能干嘛
            3。案例代码
            4。测试
                1。启动
                2。正确
                3。错误

13。springcloud config 分布式配置中心
    参考：
        https://www.cnblogs.com/zqLoveSym/p/10853957.html
        1。概述
            1。分布式系统面临--配置问题
            2。是什么
            3。能干嘛
            4。与GitHub整合配置
            5。官网
            参考：
                https://www.cnblogs.com/zqLoveSym/p/10853957.html
        2。config服务器配置与测试
            1。用你自己的账号在GitHub上新建一个名为Springcloud-config的新Repository
            2。由上一步获得刚新建的git地址  git@github.com:zzyybs/springcloud-config.git
            3。本地硬盘目录上新建git仓库并clone
            4。此时在本地D盘符下D:\44\springcloud2020\springcloud-config
            5。新建Module模块cloud-config-center-3344它即为cloud的配置中心模块cloudConfig center
            6。POM
            7。YML
            8。主启动类
            9。windows下修改hosts文件，增加映射
            10。测试通过Config微服务器是否可以从GitHub上获取配置内容
            11。配置读取规则
            12。成功实现了用SpringCloud通过GitHub获取配置信息
        3。config客户端配置与测试
            1。新建cloud-config-client-3355
            2。POM
            3。bootstrap
                1。是什么
                    application.yml:是用户级的资源配置项
                    bootstrap.yml:是系统级的，优先级更加高
                2。内容
            4。修改config-dev.yml配置并提交GitHub中，比如加个变量age或者版本号version
            5。主启动
            6。业务类
            7。测试
            8。成功实现了客户端3355访问SpringCloud Config3344通过GitHub获取配置信息
            9。问题随时而来，分布式配置的动态刷新问题
                1。linux运维修改Github上的配置文件内容做修改
                2。刷新3344，发现configService配置中心立刻响应
                3。刷新3355，发现ConfigClient客户端没有任何响应
                4。3355没有变化除非自己重启或者重新加载
                5。难道每次运维修改配置文件，客户端都需要重启？？噩梦
        4。config客户端之动态刷新
            1。避免每次更新配置都要重启客户端微服务3355
            2。动态更新
                1。修改3355模块
                2。POM引入actuator监控
                3。修改YML暴露监控端口
                4。@RefreshScope业务类Controller修改
                5。临时修改github---》3344----》3355(没有生效)
                6。how  需要运维人员发送Post请求刷新3355
                    1。必须发送post请求
                    2。curl -X POST "http://localhost:3355/actuator/refresh"
                7。再次
            3。想想还有什么问题
                1。假如有多个微服务客户端3355/3366/3377。。。。
                2。每个微服务都要执行一次post请求，手动刷新
                3。可否广播，一次通知，处处生效
                4。我们想大范围的自动刷新下，求方法

14。SpringCloud Bus消息总线
    参考：
        1。https://www.cnblogs.com/huangjuncong/p/9077099.html
        2。https://www.cnblogs.com/babycomeon/p/11141160.html
    1。概述
        1。上一步讲解的加深和扩充，一言以避之
        2。是什么：Bus支持两种消息代理，RabbittMQ和Kafka
        3。能干嘛
        4。为何被成为总线
    2。RabbitMQ环境配置
        参考：https://www.cnblogs.com/yw0219/p/8933917.html
        1。安装Erlang，下载地址
        2。安装RabbitMq，下载地址
        3。进入RabbitMq安装目录下的sbin目录
        4。输入以下命令启动管理功能
        5。访问地址查看是否安装成功
        6。输入账号密码：guest guest
    3。Springcloud Bus动态刷新全局广播
        1。必须先具备良好的RabbitMQ环境先
        2。演示广播效果，增加复杂度，再以3355为模版再制作一个3366
        3。设计思想
            1。利用消息总线触发一个客户端/BUS/refresh，而刷新所有客户端的配置
            2。利用消息总线触发一个服务端ConfigServer的bus/refresh端点，而刷新所有客户端的配置
            3。图二的架构显示更加适合，图一不适合的原因如下
        4。给cloud-config-center-3344配置中心服务端添加消息总线支持
        5。给cloud-config-center-3355客户端添加消息总线支持
        6。给cloud-config-client-3366客户端添加消息总线支持
        7。测试
        8。一次修改，广播通知，处处生效
        参考：
            https://www.cnblogs.com/babycomeon/p/11141160.html
        执行：curl -X POST http://localhost:8081/actuator/bus-refresh
    4。SpringCloud Bus动态刷新定点通知 
        1。不想全部通知，只想定点通知
        2。简单一句话
            1。指定一个具体的实例生效而不是全部
            2。公式：http://localhost:配置中心的端口号/actuator/bus-refresh/{destination}
            3。/bus/refresh请求不再发送具体的服务实例上，而是发给config server并通过destination参数类并指定需要更新配置的服务实例
        3。案例
        4。通知总结
        执行：curl -X POST http://localhost:8081/actuator/bus-refresh/config-client:3355
15.SpringCloud Stream消息驱动
    参考：
        https://www.cnblogs.com/huangjuncong/p/9102843.html
    1。消息驱动概述
        1。是什么
        2。设计思想
            标准MQ
                1。生产这/消费者之间靠消息媒介传递消息内容
                2。消息必须走特定的通道 消息通道MessageChannel
                3。消息通道里的消息如何被消费呢
            为什么用CloudStream
                1。Stream凭什么可以统一底层差异
                2。Binder
                    1。Input对应于消费者
                    2。OUtput对应于生产者
            Stream中的消息通信方式遵循了发布-订阅模式
        3。spring cloud Stream标准流程套路
            1。Binder：很方便的连接中间件
            2。Channel 通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过channel队列进行配置
            3。Source和Sink
        4。编码API和常用注解
    2。案例说明
        1。RabbitMq环境已经OK
        2。工程中新建三个子模块
    3。消息驱动生产者
        1。新建模块
        2。POM
        3。YML
        4。主启动类StreamMQMain8801
        5。业务类
            1。发送消息接口
            2。发送消息接口实现类
            3。controller
        6。测试
        参考：
            https://cloud.spring.io/spring-cloud-static/spring-cloud-stream-binder-rabbit/3.0.3.RELEASE/reference/html/spring-cloud-stream-binder-rabbit.html#_rabbitmq_binder_overview
    4。消息驱动之消费者

    5。分组消费持久化























