并发：原子性（线程切换导致的）可见性（cpu和缓存导致的），有序性（指令被优化导致的）
可见性，和有序性：volatile
原子性：synchronized，受保护资源和锁之间的关联关系是 N:1 的关系，不能用多把锁保护同一个资源；
如果是多个锁保护的同一个资源，不同的锁之间是没有可见性，和互斥性；
概念：临界区资源，涉及入口，怎么加锁和解锁；
注意：用一把锁锁住多个资源，可能会带来性能上的下降，
用不同的锁对受 保护资源进行精细化管理，能够提升性能。这种锁还有个名字，叫细粒度锁。
有的时候有需要一把锁保护有关联的对象；
例如：synchronized（object.class）,这样导致所有的对应的所有的对象都是串行，会带来性能上一个很大的影响；

死锁的四个条件：
1. 互斥，共享资源 X 和 Y 只能被一个线程占用;
2. 占有且等待，线程 T1 已经取得共享资源 X，在等待共享资源 Y 的时候，不释放共享资源 X;
3. 不可抢占，其他线程不能强行抢占线程 T1 占有的资源;
4. 循环等待，线程 T1 等待线程 T2 占有的资源，线程 T2 等待线程 T1 占有的资源，就是循环等 待。
规避死锁的做法：
1. 对于“占用且等待”这个条件，我们可以一次性申请所有的资源，这样就不存在等待了。
2. 对于“不可抢占”这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可
 以主动释放它占有的资源，这样不可抢占这个条件就破坏掉了。
3. 对于“循环等待”这个条件，可以靠按序申请资源来预防。所谓按序申请，是指资源是有线性
 顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后自然就不
 存在循环了。
 管程，指的是管理共享变量以及对共享变量的操作过程，让他们支持并发
并发两大问题：并发和同步
并发：即同一时刻只允许一个线程访问共享资源
同步：即线程之间如何通信、协作。这两大问题，管程都是能够解决的

存在共享数据才会存在安全问题，不存在共享的数据就不会存在安全问题了；数据竞争；
当多个线程同时访问同一数据，并且至少有一个线程会写这个数据的时候，如果我们不采取防护 措施，那么就会导致并发 Bug，对此还有一个专业的术语，叫做数据竞争
竞态条件 : 指的是程序的执行结果依赖线程执行的顺序

有时线程虽然没有发生阻塞，但仍然会存在执行不下去的情况，这就是所谓的“活锁”
所谓“饥饿”指的是线程因无法访问所需资源而无法执行下去的情 况。
sp
，Java SDK 并发包里之所以有那么多东西，有很大一部分原因就是要提升在某个特定领域 的性能。

性能方面的度量指标有很多，我觉得有三个指标非常重要，就是:吞吐量、延迟和并发量。
1. 吞吐量:指的是单位时间内能处理的请求数量。吞吐量越高，说明性能越好。
2. 延迟:指的是从发出请求到收到响应的时间。延迟越小，说明性能越好。
3. 并发量:指的是能同时处理的请求数量，一般来说随着并发量的增加、延迟也会增加。所以延
迟这个指标，一般都会是基于并发量来说的。例如并发量是 1000 的时候，延迟是 50 毫秒。
微观：原子性，可见性，有序性 宏观：安全性，活跃性，性能问题；

通用:初始状态、可运行状态、运行状态、休眠状态和终止状态。
java中线程的状态：
 1. NEW(初始化状态)
 2. RUNNABLE(可运行 / 运行状态)
 3. BLOCKED(阻塞状态)
 4. WAITING(无时限等待)
 5. TIMED_WAITING(有时限等待)
 6. TERMINATED(终止状态)

多少线程是才是合适：
1。为什么需要使用线程：提高性能：吞吐量和延迟
2。多线程的应用场景有哪些：
降低延迟，提高吞吐量：优化算法或者将硬件的性能发挥到极致；
，在并发编程领域， 提升性能本质上就是提升硬件的利用率，再具体点来说，就是提升 I/O 的利用率和 CPU 的利用 率。

对于cpu密集型线程：cpu核+1；
对于I/O密集型线程：最佳线程数 =CPU 核数 * [ 1 +(I/O 耗时 / CPU 耗时)]

局部变量为什么不涉及到线程安全：因为局部变量是放在调用栈中，需要了解cpu运行原理；
递归导致栈溢出的优化方案：
因为调用方法时局部变量会进线程的栈帧，线程的栈内存是有限的，而递归没控制好容易造成太多层次
调用，最终栈溢出。
解决思路一是开源节流，即减少多余的局部变量或扩大栈内存大小设置，减少调用层次涉及具体业务逻 辑，优化空间有限;二是改弦更张，即想办法消除递归，比如说能否改造成尾递归(Java会优化掉尾递 归)