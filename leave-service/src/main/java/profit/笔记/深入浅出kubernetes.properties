小鲸鱼大事记(一):初出茅庐
  主流部署应用的：租一批虚拟机，像以前管理物理服务器的方式一样，用脚本，或者手工的方式在这些机器上部署
  paas的出现的目的：端虚拟机和本地环境不一致的问题，所以当时的云计算服务， 比的就是谁能更好地模拟本地服务器环境
  PaaS 最核心的能力：
     虚拟机上部署部署一个 Cloud Foundry 项目，Cloud Foundry，调用操作系统的 Cgroups 和 Namespace 机制为每一个应用单独创建一个称作“沙盒”的隔离环境，然后在“沙盒”中启动这些应用进程。这样，就实现了把多个用户的应用互不干涉地在
    虚拟机里批量地、自动地运行起来的目的，诟病：打不同的包，需要配置不同的参数和配置，并没有经验可以借鉴，基本上靠不断的试错，才能搞定
  Docker：解决的就是这个问题，直接由一个完整操作系统的所有文件和目录构成的，所以这 个压缩包里的内容跟你本地开发和测试环境用的操作系统是完全一样的
  Docker比Paas的好处：打包了整个操作系统，保证了本地环境和云端环境的高 度一致，避免了用户通过“试错”来匹配两种不同运行环境之间差异的痛苦过程。

预习篇 · 小鲸鱼大事记(二):崭露头角
  Docker：坚持把“开发者”群体放在至高无上的位置。
  Docker：Cgroups 和 Namespace 
  1. Docker 镜像通过技术手段解决了 PaaS 的根本性问题;
  2. Docker 容器同开发者之间有着与生俱来的密切关系;
  3. PaaS 概念已经深入人心的完美契机。
预习篇 · 小鲸鱼大事记(三):群雄并起
  Docker收购Fig，编排技术，fig改名为Compose
  云计算时代编排：主要是指用户如何通过某 些工具或者配置来完成一组虚拟机以及关联资源的定义、配置、创建、删除等工作，然后由云计 算平台按照这些指定的逻辑来完成的过程。
  容器时代：编排”显然就是对 Docker 容器的一系列定义、配置和创建动作的管理。而 Fig 的工作实际上非常简单:假如现在用户需要部署的是应用容器 A、数据库容器 B、负载均衡容器 C，那么 Fig 就允许用户把 A、B、C 三个容器定义在一个配置文件中，并且可以指定它们之间 的关联关系，比如容器 A 需要访问数据库容器 B。
  Docker 公司，不失时机地发布了 Docker Compose、Swarm 和 Machine“三件套”，在重新定义 PaaS 的方向上走出了最关键的一步。
预习篇 · 小鲸鱼大事记(四):尘埃落定
  围绕docker（网络、存储、监 控、CI/CD，甚至 UI 项目）生态出现的技术：Rancher、Tutum（开源项目）
  swarm:擅长的是跟 Docker 生态的无缝集成
  Mesos:擅长的则是大规模集群的调度与管理。
  Kubernetes :Borg,就是 Pod、Sidecar 等 功能和设计模式。
白话容器基础(一):从进程说开去
  容器本身没有价值，有价值的是“容器编排”
  容器：沙河技术，沙盒就是能够像一个集装箱一样，把你的应用“装”起来的技术。这样，应用 与应用之间，就因为有了边界而不至于相互干扰;而被装进集装箱的应用，也可以被方便地搬来 搬去，这不就是 PaaS 最理想的状态嘛
  进程：一旦“程序”被执行起来，它就从磁盘上的二进制文件，变成了计算机内存中的数据、
      寄存器里的值、堆栈中的指令、被打开的文件，以及各种设备的状态信息的一个集合
  容器的核心功能：通过约束和修改进程的动态表现，从而为其创造出一个“边界”
    Cgroups：是用来制造约束的主要手段
    Namespace：则是用来修改进程视图的主要方法：
      比如 PID=1。可实际上，他们在宿主机的操作系统里，还是原来的第 100 号进程。
  Docker容器：只能看到当前namespace所规定的资源、文件、设备、状态，或者配置
白话容器基础(二):隔离与限制
  Docker：扮演的角色，容器里的应用进程，跟宿主机的进程一样，都由宿主机操作系统统一管理，之不过这些被隔离的进程拥有额外设置过的Namespace参数
  而Docker项目在这里扮演的角色，更多的是旁路式的辅助和管理工作。
  容器：但是宿主机上，它作 为第 100 号进程与其他所有进程之间依然是平等的竞争关系
      带来的问题：虽然第 100 号进程表面上被隔离了起来，但是它所能够使用到的资源(比如 CPU、内存)，却是可以随时被宿主 机上的其他进程(或者其他容器)占用的。当然，这个 100 号进程自己也可能把所有资源吃 光。这些情况，显然都不是一个“沙盒”应该表现出来的合理行为。
  Linux Cgroups： Linux Control Group。它最主要的作用，就是限制一个进程组能够 使用的资源上限，包括 CPU、内存、磁盘、网络带宽
  linuxCgroups应用：限制某个达到占用100%cpu的进程降到20%
    进入：cd /sys/fs/cgroup/cpu 
    创建目录：mkdir container
    ls container/     新创建的 container 目录下，自 动生成该子系统对应的资源限制文件。
    执行  while : ; do : ; done &
    top 发现占用CPU资源100%
    cat /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us  查看CPU quota 还没有任何限制(即:-1)
    cat /sys/fs/cgroup/cpu/container/cpu.cfs_period_us  CPU period 则是默认的 100 ms(100000 us):
      接下来我们可以通过这些文件的内容修改设置限制： container 组里的 cfs_quota 文件写入 20 ms(20000 us):
    echo 20000 > /sys/fs/cgroup/cpu/container/cpu.cfs_quota_us
      每 100 ms 的时间里，被该控制组 限制的进程只能使用 20 ms 的 CPU 时间，也就是说这个进程只能使用到 20% 的 CPU 带宽
    接下来把限制的进程id写入container组里的tasks文件中
      echo 226 > /sys/fs/cgroup/cpu/container/tasks
      top   降到了20%
  Linux Cgroups：一个子系统目录加上一组 资源限制文件的组合
  Docker或linux容器：在每个子系统下，为每个容器创建一个控制组(即创建一个新目录)，然后在启动容器进程之后，把这个进程 的 PID 填写到对应控制组的 tasks 文件中就可以了
  docker应用：
  docker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash
  cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_period_us
  cat /sys/fs/cgroup/cpu/docker/5d5c9f67d/cpu.cfs_quota_us
白话容器基础(三):深入理解容器镜像
    1. 启用 Linux Namespace 配置;
    2. 设置指定的 Cgroups 参数;
    3. 切换进程的根目录(Change Root)。
    Docker 项目在最后一步的切换上会优先使用 pivot_root 系统调用，如果系统不支持，才会使用 chroot。这两个系统调用虽然功能类似，但 是也有细微的区别，
    rootfs（躯壳）：一个操作系统所包含的文件、配置和目录，并不包括操作系 统内核
    Linux 操作系统中，这两部分是分开存放的，操作系统只有在开机启动时才会加载 指定版本的内核镜像
    注意：同一台机器上的所有容器，都共享宿主机操作系统的内核。
    rootfs 里打包的不只是应用，而是整个操作系统的文件和目录，也就意味着，应用以及它 运行所需要的所有依赖，都被封装在了一起
    经典：对一个应用来说， 操作系统本身才是它运行所需要的最完整的“依赖库”。
    层（layer）：用户制作镜像的 每一步操作，都会生成一个层，也就是一个增量 rootfs。
    容器的 rootfs 由如下图所示的三部分组成:
    1。第一部分，只读层。
    2。第二部分，可读写层。
    3。第三部分，Init 层。
白话容器基础(四):重新认识Docker容器
  获取容器的真正的进程id
  docker ps
  docker inspect --format '{{ .State.Pid }}' 47ea774466b7
  查看宿主机的 proc 文件，看到这个 3925 进程的所有 Namespace 对应的 文件:
  ls -l  /proc/3925/ns

  查看volume具体的位置：
  docker volume ls
  docker volume inspect springboot_mysql_volume
  可以确认，容器 Volume 里的信息，并不会被 docker commit 提交掉;但这个挂载点目录 /test 本身，则会出现在新的镜像当中。
从容器到容器云:谈谈Kubernetes的本质
容器：由 Linux Namespace、Linux Cgroups 和 rootfs 三种技术构建出来的进程的隔离环境
Linux 容器：
  1。一组联合挂载在 /var/lib/docker/aufs/mnt 上的 rootfs，这一部分我们称为“容器镜 像”(Container Image)，是容器的静态视图;
  2。一个由 Namespace+Cgroups 构成的隔离环境，这一部分我们称为“容器运行 时”(Container Runtime)，是容器的动态视图。
容器镜像：承载着容器信息进行传递